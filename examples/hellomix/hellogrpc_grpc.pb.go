// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: hellogrpc.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HelloFromSVL_Hello_FullMethodName = "/HelloFromSVL/Hello"
)

// HelloFromSVLClient is the client API for HelloFromSVL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloFromSVLClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type helloFromSVLClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloFromSVLClient(cc grpc.ClientConnInterface) HelloFromSVLClient {
	return &helloFromSVLClient{cc}
}

func (c *helloFromSVLClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, HelloFromSVL_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloFromSVLServer is the server API for HelloFromSVL service.
// All implementations must embed UnimplementedHelloFromSVLServer
// for forward compatibility
type HelloFromSVLServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedHelloFromSVLServer()
}

// UnimplementedHelloFromSVLServer must be embedded to have forward compatible implementations.
type UnimplementedHelloFromSVLServer struct {
}

func (UnimplementedHelloFromSVLServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedHelloFromSVLServer) mustEmbedUnimplementedHelloFromSVLServer() {}

// UnsafeHelloFromSVLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloFromSVLServer will
// result in compilation errors.
type UnsafeHelloFromSVLServer interface {
	mustEmbedUnimplementedHelloFromSVLServer()
}

func RegisterHelloFromSVLServer(s grpc.ServiceRegistrar, srv HelloFromSVLServer) {
	s.RegisterService(&HelloFromSVL_ServiceDesc, srv)
}

func _HelloFromSVL_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloFromSVLServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloFromSVL_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloFromSVLServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloFromSVL_ServiceDesc is the grpc.ServiceDesc for HelloFromSVL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloFromSVL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HelloFromSVL",
	HandlerType: (*HelloFromSVLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _HelloFromSVL_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hellogrpc.proto",
}

const (
	HelloFromMTV_Hello_FullMethodName   = "/HelloFromMTV/Hello"
	HelloFromMTV_GetDate_FullMethodName = "/HelloFromMTV/GetDate"
)

// HelloFromMTVClient is the client API for HelloFromMTV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloFromMTVClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	GetDate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*timestamppb.Timestamp, error)
}

type helloFromMTVClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloFromMTVClient(cc grpc.ClientConnInterface) HelloFromMTVClient {
	return &helloFromMTVClient{cc}
}

func (c *helloFromMTVClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, HelloFromMTV_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloFromMTVClient) GetDate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*timestamppb.Timestamp, error) {
	out := new(timestamppb.Timestamp)
	err := c.cc.Invoke(ctx, HelloFromMTV_GetDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloFromMTVServer is the server API for HelloFromMTV service.
// All implementations must embed UnimplementedHelloFromMTVServer
// for forward compatibility
type HelloFromMTVServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	GetDate(context.Context, *emptypb.Empty) (*timestamppb.Timestamp, error)
	mustEmbedUnimplementedHelloFromMTVServer()
}

// UnimplementedHelloFromMTVServer must be embedded to have forward compatible implementations.
type UnimplementedHelloFromMTVServer struct {
}

func (UnimplementedHelloFromMTVServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedHelloFromMTVServer) GetDate(context.Context, *emptypb.Empty) (*timestamppb.Timestamp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDate not implemented")
}
func (UnimplementedHelloFromMTVServer) mustEmbedUnimplementedHelloFromMTVServer() {}

// UnsafeHelloFromMTVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloFromMTVServer will
// result in compilation errors.
type UnsafeHelloFromMTVServer interface {
	mustEmbedUnimplementedHelloFromMTVServer()
}

func RegisterHelloFromMTVServer(s grpc.ServiceRegistrar, srv HelloFromMTVServer) {
	s.RegisterService(&HelloFromMTV_ServiceDesc, srv)
}

func _HelloFromMTV_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloFromMTVServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloFromMTV_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloFromMTVServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloFromMTV_GetDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloFromMTVServer).GetDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloFromMTV_GetDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloFromMTVServer).GetDate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloFromMTV_ServiceDesc is the grpc.ServiceDesc for HelloFromMTV service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloFromMTV_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HelloFromMTV",
	HandlerType: (*HelloFromMTVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _HelloFromMTV_Hello_Handler,
		},
		{
			MethodName: "GetDate",
			Handler:    _HelloFromMTV_GetDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hellogrpc.proto",
}

const (
	HelloFromNYC_Hello_FullMethodName = "/HelloFromNYC/Hello"
)

// HelloFromNYCClient is the client API for HelloFromNYC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloFromNYCClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type helloFromNYCClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloFromNYCClient(cc grpc.ClientConnInterface) HelloFromNYCClient {
	return &helloFromNYCClient{cc}
}

func (c *helloFromNYCClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, HelloFromNYC_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloFromNYCServer is the server API for HelloFromNYC service.
// All implementations must embed UnimplementedHelloFromNYCServer
// for forward compatibility
type HelloFromNYCServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedHelloFromNYCServer()
}

// UnimplementedHelloFromNYCServer must be embedded to have forward compatible implementations.
type UnimplementedHelloFromNYCServer struct {
}

func (UnimplementedHelloFromNYCServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedHelloFromNYCServer) mustEmbedUnimplementedHelloFromNYCServer() {}

// UnsafeHelloFromNYCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloFromNYCServer will
// result in compilation errors.
type UnsafeHelloFromNYCServer interface {
	mustEmbedUnimplementedHelloFromNYCServer()
}

func RegisterHelloFromNYCServer(s grpc.ServiceRegistrar, srv HelloFromNYCServer) {
	s.RegisterService(&HelloFromNYC_ServiceDesc, srv)
}

func _HelloFromNYC_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloFromNYCServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloFromNYC_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloFromNYCServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloFromNYC_ServiceDesc is the grpc.ServiceDesc for HelloFromNYC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloFromNYC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HelloFromNYC",
	HandlerType: (*HelloFromNYCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _HelloFromNYC_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hellogrpc.proto",
}
