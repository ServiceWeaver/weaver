// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package model

import (
	"fmt"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"time"
)

// weaver.InstanceOf checks.

// weaver.Router checks.

// Local stub implementations.

// Client stub implementations.

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][24]struct{}](`

ERROR: You generated this file with 'weaver generate' (devel) (codegen
version v0.24.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

// Reflect stub implementations.

// AutoMarshal implementations.

var _ codegen.AutoMarshal = (*Transaction)(nil)

type __is_Transaction[T ~struct {
	weaver.AutoMarshal
	FromAccountNum string    "gorm:\"column:from_acct;not null\""
	FromRoutingNum string    "gorm:\"column:from_route;not null\""
	ToAccountNum   string    "gorm:\"column:to_acct;not null\""
	ToRoutingNum   string    "gorm:\"column:to_route;not null\""
	Amount         int64     "gorm:\"column:amount;not null\""
	Timestamp      time.Time "gorm:\"column:timestamp;not null\""
}] struct{}

var _ __is_Transaction[Transaction]

func (x *Transaction) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Transaction.WeaverMarshal: nil receiver"))
	}
	enc.String(x.FromAccountNum)
	enc.String(x.FromRoutingNum)
	enc.String(x.ToAccountNum)
	enc.String(x.ToRoutingNum)
	enc.Int64(x.Amount)
	enc.EncodeBinaryMarshaler(&x.Timestamp)
}

func (x *Transaction) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Transaction.WeaverUnmarshal: nil receiver"))
	}
	x.FromAccountNum = dec.String()
	x.FromRoutingNum = dec.String()
	x.ToAccountNum = dec.String()
	x.ToRoutingNum = dec.String()
	x.Amount = dec.Int64()
	dec.DecodeBinaryUnmarshaler(&x.Timestamp)
}

var _ codegen.AutoMarshal = (*TransactionWithID)(nil)

type __is_TransactionWithID[T ~struct {
	weaver.AutoMarshal
	Transaction
	TransactionID int64 "gorm:\"column:transaction_id;primaryKey;autoIncrement:true\""
}] struct{}

var _ __is_TransactionWithID[TransactionWithID]

func (x *TransactionWithID) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("TransactionWithID.WeaverMarshal: nil receiver"))
	}
	(x.Transaction).WeaverMarshal(enc)
	enc.Int64(x.TransactionID)
}

func (x *TransactionWithID) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("TransactionWithID.WeaverUnmarshal: nil receiver"))
	}
	(&x.Transaction).WeaverUnmarshal(dec)
	x.TransactionID = dec.Int64()
}
