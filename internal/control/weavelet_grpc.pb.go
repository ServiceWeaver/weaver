// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: internal/control/weavelet.proto

package control

import (
	context "context"
	protos "github.com/ServiceWeaver/weaver/runtime/protos"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WeaveletControlGrpc_InitWeavelet_FullMethodName      = "/control.WeaveletControlGrpc/InitWeavelet"
	WeaveletControlGrpc_UpdateComponents_FullMethodName  = "/control.WeaveletControlGrpc/UpdateComponents"
	WeaveletControlGrpc_UpdateRoutingInfo_FullMethodName = "/control.WeaveletControlGrpc/UpdateRoutingInfo"
	WeaveletControlGrpc_GetHealth_FullMethodName         = "/control.WeaveletControlGrpc/GetHealth"
	WeaveletControlGrpc_GetLoad_FullMethodName           = "/control.WeaveletControlGrpc/GetLoad"
	WeaveletControlGrpc_GetMetrics_FullMethodName        = "/control.WeaveletControlGrpc/GetMetrics"
	WeaveletControlGrpc_GetProfile_FullMethodName        = "/control.WeaveletControlGrpc/GetProfile"
)

// WeaveletControlGrpcClient is the client API for WeaveletControlGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeaveletControlGrpcClient interface {
	// InitWeavelet initializes the weavelet.
	InitWeavelet(ctx context.Context, in *protos.InitWeaveletRequest, opts ...grpc.CallOption) (*protos.InitWeaveletReply, error)
	// UpdateComponents updates the weavelet with the latest set of components it
	// should be running.
	UpdateComponents(ctx context.Context, in *protos.UpdateComponentsRequest, opts ...grpc.CallOption) (*protos.UpdateComponentsReply, error)
	// UpdateRoutingInfo updates the weavelet with a component's most recent routing info.
	UpdateRoutingInfo(ctx context.Context, in *protos.UpdateRoutingInfoRequest, opts ...grpc.CallOption) (*protos.UpdateRoutingInfoReply, error)
	// GetHealth fetches weavelet health information.
	GetHealth(ctx context.Context, in *protos.GetHealthRequest, opts ...grpc.CallOption) (*protos.GetHealthReply, error)
	// GetLoad fetches weavelet load information.
	GetLoad(ctx context.Context, in *protos.GetLoadRequest, opts ...grpc.CallOption) (*protos.GetLoadReply, error)
	// GetMetrics fetches metrics from the weavelet.
	GetMetrics(ctx context.Context, in *protos.GetMetricsRequest, opts ...grpc.CallOption) (*protos.GetMetricsReply, error)
	// GetProfile gets a profile from the weavelet.
	GetProfile(ctx context.Context, in *protos.GetProfileRequest, opts ...grpc.CallOption) (*protos.GetProfileReply, error)
}

type weaveletControlGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewWeaveletControlGrpcClient(cc grpc.ClientConnInterface) WeaveletControlGrpcClient {
	return &weaveletControlGrpcClient{cc}
}

func (c *weaveletControlGrpcClient) InitWeavelet(ctx context.Context, in *protos.InitWeaveletRequest, opts ...grpc.CallOption) (*protos.InitWeaveletReply, error) {
	out := new(protos.InitWeaveletReply)
	err := c.cc.Invoke(ctx, WeaveletControlGrpc_InitWeavelet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaveletControlGrpcClient) UpdateComponents(ctx context.Context, in *protos.UpdateComponentsRequest, opts ...grpc.CallOption) (*protos.UpdateComponentsReply, error) {
	out := new(protos.UpdateComponentsReply)
	err := c.cc.Invoke(ctx, WeaveletControlGrpc_UpdateComponents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaveletControlGrpcClient) UpdateRoutingInfo(ctx context.Context, in *protos.UpdateRoutingInfoRequest, opts ...grpc.CallOption) (*protos.UpdateRoutingInfoReply, error) {
	out := new(protos.UpdateRoutingInfoReply)
	err := c.cc.Invoke(ctx, WeaveletControlGrpc_UpdateRoutingInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaveletControlGrpcClient) GetHealth(ctx context.Context, in *protos.GetHealthRequest, opts ...grpc.CallOption) (*protos.GetHealthReply, error) {
	out := new(protos.GetHealthReply)
	err := c.cc.Invoke(ctx, WeaveletControlGrpc_GetHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaveletControlGrpcClient) GetLoad(ctx context.Context, in *protos.GetLoadRequest, opts ...grpc.CallOption) (*protos.GetLoadReply, error) {
	out := new(protos.GetLoadReply)
	err := c.cc.Invoke(ctx, WeaveletControlGrpc_GetLoad_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaveletControlGrpcClient) GetMetrics(ctx context.Context, in *protos.GetMetricsRequest, opts ...grpc.CallOption) (*protos.GetMetricsReply, error) {
	out := new(protos.GetMetricsReply)
	err := c.cc.Invoke(ctx, WeaveletControlGrpc_GetMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaveletControlGrpcClient) GetProfile(ctx context.Context, in *protos.GetProfileRequest, opts ...grpc.CallOption) (*protos.GetProfileReply, error) {
	out := new(protos.GetProfileReply)
	err := c.cc.Invoke(ctx, WeaveletControlGrpc_GetProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeaveletControlGrpcServer is the server API for WeaveletControlGrpc service.
// All implementations must embed UnimplementedWeaveletControlGrpcServer
// for forward compatibility
type WeaveletControlGrpcServer interface {
	// InitWeavelet initializes the weavelet.
	InitWeavelet(context.Context, *protos.InitWeaveletRequest) (*protos.InitWeaveletReply, error)
	// UpdateComponents updates the weavelet with the latest set of components it
	// should be running.
	UpdateComponents(context.Context, *protos.UpdateComponentsRequest) (*protos.UpdateComponentsReply, error)
	// UpdateRoutingInfo updates the weavelet with a component's most recent routing info.
	UpdateRoutingInfo(context.Context, *protos.UpdateRoutingInfoRequest) (*protos.UpdateRoutingInfoReply, error)
	// GetHealth fetches weavelet health information.
	GetHealth(context.Context, *protos.GetHealthRequest) (*protos.GetHealthReply, error)
	// GetLoad fetches weavelet load information.
	GetLoad(context.Context, *protos.GetLoadRequest) (*protos.GetLoadReply, error)
	// GetMetrics fetches metrics from the weavelet.
	GetMetrics(context.Context, *protos.GetMetricsRequest) (*protos.GetMetricsReply, error)
	// GetProfile gets a profile from the weavelet.
	GetProfile(context.Context, *protos.GetProfileRequest) (*protos.GetProfileReply, error)
	mustEmbedUnimplementedWeaveletControlGrpcServer()
}

// UnimplementedWeaveletControlGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedWeaveletControlGrpcServer struct {
}

func (UnimplementedWeaveletControlGrpcServer) InitWeavelet(context.Context, *protos.InitWeaveletRequest) (*protos.InitWeaveletReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitWeavelet not implemented")
}
func (UnimplementedWeaveletControlGrpcServer) UpdateComponents(context.Context, *protos.UpdateComponentsRequest) (*protos.UpdateComponentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComponents not implemented")
}
func (UnimplementedWeaveletControlGrpcServer) UpdateRoutingInfo(context.Context, *protos.UpdateRoutingInfoRequest) (*protos.UpdateRoutingInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoutingInfo not implemented")
}
func (UnimplementedWeaveletControlGrpcServer) GetHealth(context.Context, *protos.GetHealthRequest) (*protos.GetHealthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedWeaveletControlGrpcServer) GetLoad(context.Context, *protos.GetLoadRequest) (*protos.GetLoadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoad not implemented")
}
func (UnimplementedWeaveletControlGrpcServer) GetMetrics(context.Context, *protos.GetMetricsRequest) (*protos.GetMetricsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedWeaveletControlGrpcServer) GetProfile(context.Context, *protos.GetProfileRequest) (*protos.GetProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedWeaveletControlGrpcServer) mustEmbedUnimplementedWeaveletControlGrpcServer() {}

// UnsafeWeaveletControlGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeaveletControlGrpcServer will
// result in compilation errors.
type UnsafeWeaveletControlGrpcServer interface {
	mustEmbedUnimplementedWeaveletControlGrpcServer()
}

func RegisterWeaveletControlGrpcServer(s grpc.ServiceRegistrar, srv WeaveletControlGrpcServer) {
	s.RegisterService(&WeaveletControlGrpc_ServiceDesc, srv)
}

func _WeaveletControlGrpc_InitWeavelet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.InitWeaveletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaveletControlGrpcServer).InitWeavelet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaveletControlGrpc_InitWeavelet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaveletControlGrpcServer).InitWeavelet(ctx, req.(*protos.InitWeaveletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaveletControlGrpc_UpdateComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.UpdateComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaveletControlGrpcServer).UpdateComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaveletControlGrpc_UpdateComponents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaveletControlGrpcServer).UpdateComponents(ctx, req.(*protos.UpdateComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaveletControlGrpc_UpdateRoutingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.UpdateRoutingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaveletControlGrpcServer).UpdateRoutingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaveletControlGrpc_UpdateRoutingInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaveletControlGrpcServer).UpdateRoutingInfo(ctx, req.(*protos.UpdateRoutingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaveletControlGrpc_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.GetHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaveletControlGrpcServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaveletControlGrpc_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaveletControlGrpcServer).GetHealth(ctx, req.(*protos.GetHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaveletControlGrpc_GetLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.GetLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaveletControlGrpcServer).GetLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaveletControlGrpc_GetLoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaveletControlGrpcServer).GetLoad(ctx, req.(*protos.GetLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaveletControlGrpc_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaveletControlGrpcServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaveletControlGrpc_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaveletControlGrpcServer).GetMetrics(ctx, req.(*protos.GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaveletControlGrpc_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaveletControlGrpcServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaveletControlGrpc_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaveletControlGrpcServer).GetProfile(ctx, req.(*protos.GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WeaveletControlGrpc_ServiceDesc is the grpc.ServiceDesc for WeaveletControlGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeaveletControlGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.WeaveletControlGrpc",
	HandlerType: (*WeaveletControlGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitWeavelet",
			Handler:    _WeaveletControlGrpc_InitWeavelet_Handler,
		},
		{
			MethodName: "UpdateComponents",
			Handler:    _WeaveletControlGrpc_UpdateComponents_Handler,
		},
		{
			MethodName: "UpdateRoutingInfo",
			Handler:    _WeaveletControlGrpc_UpdateRoutingInfo_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _WeaveletControlGrpc_GetHealth_Handler,
		},
		{
			MethodName: "GetLoad",
			Handler:    _WeaveletControlGrpc_GetLoad_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _WeaveletControlGrpc_GetMetrics_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _WeaveletControlGrpc_GetProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/control/weavelet.proto",
}
