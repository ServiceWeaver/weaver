// go:build !ignoreWeaverGen

package main

// Code generated by "weaver generate". DO NOT EDIT.
import (
	"context"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.ReportVersion(0, 9, 0)

	codegen.Register(codegen.Registration{
		Name:         "github.com/ServiceWeaver/weaver/runtime/bin/testprogram/A",
		Iface:        reflect.TypeOf((*A)(nil)).Elem(),
		Impl:         reflect.TypeOf(a{}),
		LocalStubFn:  func(impl any, tracer trace.Tracer) any { return a_local_stub{impl: impl.(A), tracer: tracer} },
		ClientStubFn: func(stub codegen.Stub, caller string) any { return a_client_stub{stub: stub} },
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return a_server_stub{impl: impl.(A), addLoad: addLoad}
		},
		RefData: "⟦193f6c94:wEaVeReDgE:github.com/ServiceWeaver/weaver/runtime/bin/testprogram/A→github.com/ServiceWeaver/weaver/runtime/bin/testprogram/B⟧\n⟦8cd483a3:wEaVeReDgE:github.com/ServiceWeaver/weaver/runtime/bin/testprogram/A→github.com/ServiceWeaver/weaver/runtime/bin/testprogram/C⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:         "github.com/ServiceWeaver/weaver/runtime/bin/testprogram/B",
		Iface:        reflect.TypeOf((*B)(nil)).Elem(),
		Impl:         reflect.TypeOf(b{}),
		LocalStubFn:  func(impl any, tracer trace.Tracer) any { return b_local_stub{impl: impl.(B), tracer: tracer} },
		ClientStubFn: func(stub codegen.Stub, caller string) any { return b_client_stub{stub: stub} },
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return b_server_stub{impl: impl.(B), addLoad: addLoad}
		},
		RefData: "",
	})
	codegen.Register(codegen.Registration{
		Name:         "github.com/ServiceWeaver/weaver/runtime/bin/testprogram/C",
		Iface:        reflect.TypeOf((*C)(nil)).Elem(),
		Impl:         reflect.TypeOf(c{}),
		LocalStubFn:  func(impl any, tracer trace.Tracer) any { return c_local_stub{impl: impl.(C), tracer: tracer} },
		ClientStubFn: func(stub codegen.Stub, caller string) any { return c_client_stub{stub: stub} },
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return c_server_stub{impl: impl.(C), addLoad: addLoad}
		},
		RefData: "",
	})
	codegen.Register(codegen.Registration{
		Name:  "github.com/ServiceWeaver/weaver/Main",
		Iface: reflect.TypeOf((*weaver.Main)(nil)).Elem(),
		Impl:  reflect.TypeOf(app{}),
		LocalStubFn: func(impl any, tracer trace.Tracer) any {
			return main_local_stub{impl: impl.(weaver.Main), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any { return main_client_stub{stub: stub} },
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return main_server_stub{impl: impl.(weaver.Main), addLoad: addLoad}
		},
		RefData: "⟦d90475cb:wEaVeReDgE:github.com/ServiceWeaver/weaver/Main→github.com/ServiceWeaver/weaver/runtime/bin/testprogram/A⟧\n",
	})
}

// Local stub implementations.

type a_local_stub struct {
	impl   A
	tracer trace.Tracer
}

type b_local_stub struct {
	impl   B
	tracer trace.Tracer
}

type c_local_stub struct {
	impl   C
	tracer trace.Tracer
}

type main_local_stub struct {
	impl   weaver.Main
	tracer trace.Tracer
}

// Client stub implementations.

type a_client_stub struct {
	stub codegen.Stub
}

type b_client_stub struct {
	stub codegen.Stub
}

type c_client_stub struct {
	stub codegen.Stub
}

type main_client_stub struct {
	stub codegen.Stub
}

// Server stub implementations.

type a_server_stub struct {
	impl    A
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s a_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	default:
		return nil
	}
}

type b_server_stub struct {
	impl    B
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s b_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	default:
		return nil
	}
}

type c_server_stub struct {
	impl    C
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s c_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	default:
		return nil
	}
}

type main_server_stub struct {
	impl    weaver.Main
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s main_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	default:
		return nil
	}
}
