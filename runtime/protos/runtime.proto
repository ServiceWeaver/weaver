// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option go_package = "github.com/ServiceWeaver/weaver/runtime/protos";

package runtime;

// See https://serviceweaver.dev/blog/deployers.html for an overview of the
// deployer API.
//
// A deployer and a weavelet communicate with each other over a pair of Unix
// pipes. One pipe runs from the deployer to the weavelet, and the other runs in
// the opposite direction from the weavelet to the deployer. The deployer and
// weavelet send EnvelopeMsg and WeaveletMsg protocol buffers over these pipes,
// respectively. We call the part of a deployer that communicates with a
// weavelet an envelope, hence the name EnvelopeMsg.
//
//                 ┌──────────┐   ________   ┌──────────┐
//                 │          │<─O________)──│          │
//                 │ ENVELOPE │   ________   │ WEAVELET │
//                 │          │──O________)─>│          │
//                 └──────────┘              └──────────┘
//
// When an envelope and weavelet first establish their connection, they perform
// a *handshake*. The envelope sends an EnvelopeInfo, and the weavelet responds
// with a WeaveletInfo.
//
//                   ENVELOPE                  WEAVELET
//                   ───┬────                  ───┬────
//                      │ ──────────────────────> │ EnvelopeInfo
//                      │ <────────────────────── │ WeaveletInfo
//                      :                         :
//
// After the handshake, the envelope and weavelet communicate freely. There are
// three communication patterns.
//
//     1. The envelope can initiate an RPC against the weavelet.
//     2. The weavelet can initiate an RPC against the envelope.
//     3. The weavelet can send an unacknowledged RPC to the envelope.
//
// Unacknowledged RPCs do not elicit responses. Here is an example of these
// three types of communication.
//
//                   ENVELOPE                  WEAVELET
//                   ───┬────                  ───┬────
//                   1. │ ──────────────────────> │ UpdateComponentsRequest
//                      │ <────────────────────── │ UpdateComponentsReply
//                      │                         │
//                   2. │ <────────────────────── │ GetListenerAddressRequest
//                      │ ──────────────────────> │ GetListenerAddressReply
//                      │                         │
//                   3. │ <────────────────────── │ LogEntry
//                      │ <────────────────────── │ TraceSpans
//                      :                         :
//
// Note that these three types of communication can intersperse.
//
//                   ENVELOPE                  WEAVELET
//                   ───┬────                  ───┬────
//                      │ <────────────────────── │ ActivateComponentRequest
//                      │ ──────────────────────> │ UpdateComponentsRequest
//                      │ <────────────────────── │ UpdateComponentsReply
//                      │ <────────────────────── │ LogEntry
//                      │ ──────────────────────> │ UpdateRoutingInfoRequest
//                      │ <────────────────────── │ UpdateRoutingInfoReply
//                      │ ──────────────────────> │ ActivateComponentReply
//                      :                         :
//
// To avoid deadlocks, a weavelet is guaranteed to process an RPC without
// blocking and without touching the pipe.

// EnvelopeMsg is a message sent by an envelope to a weavelet.
message EnvelopeMsg {
  // TODO(mwhittaker): Don't make UpdateRoutingInfoRequest and
  // UpdateComponentsRequest RPCs? They can be one-directional messages like
  // logs and traces.

  // A unique id for RPCs. An RPC request with positive id x expects a reply
  // with negative id -x. An unacknowledged RPC request has an id of 0.
  int64 id = 1;

  // Exactly one of the following should be set.

  // Handshake.
  EnvelopeInfo envelope_info = 2;

  // Envelope initiated RPC requests.
  GetHealthRequest get_health_request = 3;
  GetMetricsRequest get_metrics_request = 4;
  GetLoadRequest get_load_request = 5;
  GetProfileRequest get_profile_request = 6;
  UpdateRoutingInfoRequest update_routing_info_request = 7;
  UpdateComponentsRequest update_components_request = 8;

  // Weavelet initiated RPC replies.
  string error = 9;  // non-nil on error
  ActivateComponentReply activate_component_reply = 10;
  GetListenerAddressReply get_listener_address_reply = 11;
  ExportListenerReply export_listener_reply = 12;
  GetSelfCertificateReply get_self_certificate_reply = 15;
  VerifyClientCertificateReply verify_client_certificate_reply = 13;
  VerifyServerCertificateReply verify_server_certificate_reply = 14;
}

// WeaveletMsg is a message sent by a weavelet to an envelope.
message WeaveletMsg {
  // A unique id for RPCs. An RPC request with positive id x expects a reply
  // with negative id -x. An unacknowledged RPC request has an id of 0.
  int64 id = 1;

  // Exactly one of the following should be set.

  // Handshake.
  WeaveletInfo weavelet_info = 2;

  // Weavelet initiated unacknowledged RPCs.
  LogEntry log_entry = 3;
  TraceSpans trace_spans = 4;

  // Envelope initiated RPC replies.
  string error = 5;  // non-nil on error
  GetHealthReply get_health_reply = 6;
  GetMetricsReply get_metrics_reply = 7;
  GetLoadReply get_load_reply = 8;
  GetProfileReply get_profile_reply = 9;
  UpdateRoutingInfoReply update_routing_info_reply = 10;
  UpdateComponentsReply update_components_reply = 11;

  // Weavelet initiated RPC requests.
  ActivateComponentRequest activate_component_request = 12;
  GetListenerAddressRequest get_listener_address_request = 13;
  ExportListenerRequest export_listener_request = 14;
  GetSelfCertificateRequest get_self_certificate_request = 17;
  VerifyClientCertificateRequest verify_client_certificate_request = 15;
  VerifyServerCertificateRequest verify_server_certificate_request = 16;
}

// EnvelopeInfo is the information provided by an envelope to a weavelet during
// the initial envelope-weavelet handshake.
message EnvelopeInfo {
  string app = 1;                    // app name
  string deployment_id = 2;          // globally unique deployment id
  string id = 3;                     // globally unique weavelet id
  map<string, string> sections = 4;  // See AppConfig.Sections.
  bool run_main = 7;                 // run the main function?

  // Should weavelets establish mTLS connections with each other?
  bool mtls = 8;

  // Address on which the weavelet's internal network listener should listen on
  // (e.g., "localhost:12345", ":0"). If the address is empty, it defaults to
  // ":0", like net.Listen.
  //
  // Note that for some deployers, the internal network listener can listen on
  // an arbitrary port (don't set the port number). However, for deployers where
  // listeners are prestarted (e.g., Kubernetes deployers), the port number
  // should be propagated from the deployer.
  string internal_address = 10;
}

// WeaveletInfo is the information provided by a weavelet to an envelope during
// the initial envelope-weavelet handshake.
message WeaveletInfo {
  // Internal TCP address of the weavelet. This address will be passed to other
  // weavelets as part of their RoutingInfo.
  string dial_addr = 1;

  // The deployer API version of the weavelet.
  SemVer version = 3;
}

// SemVer represents a [semantic version][1] of the form
// "<major>.<minor>.<patch>". For example, the semver "0.12.3" has major=0,
// minor=12, and patch=3.
//
// [1]: https://semver.org/
message SemVer {
  int64 major = 1;
  int64 minor = 2;
  int64 patch = 3;
}

// GetHealthRequest is a request from an envelope for a weavelet's health.
message GetHealthRequest {}

// GetHealthReply is a reply to a GetHealthRequest.
message GetHealthReply {
  HealthStatus status = 1;
}

// HealthStatus specifies the health of a weavelet.
enum HealthStatus {
  UNKNOWN = 0;
  HEALTHY = 1;
  UNHEALTHY = 2;
  TERMINATED = 3;
}

// GetMetricsRequest is a request from an envelope for a weavelet's metrics.
// There can only be one outstanding GetMetricsRequest at a time.
message GetMetricsRequest {}

// GetMetricsReply is a reply to a GetMetricsRequest. It only contains
// information about the metrics that have changed since the prior
// GetMetricsRequest.
message GetMetricsReply {
  MetricUpdate update = 1;
}

// MetricType specifies a particular kind of metric.
enum MetricType {
  INVALID = 0;
  COUNTER = 1;
  GAUGE = 2;
  HISTOGRAM = 3;
}

// MetricUpdate contains metric updates.
message MetricUpdate {
  // Metric definitions and updated values.
  //
  // All metrics are identified by their globally unique id. Two endpoints
  // exchanging metric updates must ensure that a received metric value has been
  // preceded by a metric definition with the same id, either in the current
  // update or an earlier one.
  repeated MetricDef defs = 1;      // metric definitions
  repeated MetricValue values = 2;  // metric values
}

// MetricDef is the definition of a new metric.
message MetricDef {
  uint64 id = 1;                   // metric's unique id
  string name = 2;                 // name of the metric
  MetricType typ = 3;              // type of metric
  string help = 4;                 // metric's help message
  map<string, string> labels = 5;  // metric labels
  repeated double bounds = 6;      // histogram bucket bounds
}

// MetricValue is the value associated with a metric.
message MetricValue {
  uint64 id = 1;               // metric's unique id.
  double value = 2;            // value for counter and gauge, sum for histogram
  repeated uint64 counts = 3;  // histogram counts
}

// MetricSnapshot is a snapshot of a metric. It is the union of a MetricDef and
// a MetricValue.
//
// TODO(mwhittaker): Move out of runtime.proto. It's not used by the pipe.
message MetricSnapshot {
  uint64 id = 1;                   // metric's unique id
  string name = 2;                 // name of the metric
  MetricType typ = 3;              // type of metric
  string help = 4;                 // metric's help message
  map<string, string> labels = 5;  // metric labels
  repeated double bounds = 6;      // histogram bucket bounds
  double value = 7;            // value for counter and gauge, sum for histogram
  repeated uint64 counts = 8;  // histogram counts
}

// GetLoadRequest is a request from an envelope for a weavelet's load report.
message GetLoadRequest {}

// GetLoadReply is a reply to a GetLoadRequest.
message GetLoadReply {
  LoadReport load = 1;
}

// LoadReport contains load information for all routed components hosted by a
// particular weavelet.
message LoadReport {
  map<string, ComponentLoad> loads = 1;  // load for routed components

  // ComponentLoad includes load information for a component. The component's
  // key space is divided into a number of slices, each of which is associated
  // with a particular double-valued load.
  //
  // TODO(mwhittaker): In the short term, a weavelet will report one SliceLoad
  // for every slice it is assigned. In the future, however, we may report load
  // in more advanced ways.
  message ComponentLoad {
    // TODO(mwhittaker): In full generality, load is a generic
    // application-specific double-valued measurement (e.g., total number of
    // requests, size of components in memory). For now to simplify things, we
    // assume load is measured as requests per second.
    repeated SliceLoad load = 1;

    // TODO(mwhittaker): For now, load is reported with respect to a given
    // assignment. When the assignment changes, the load is reset. This approach
    // works for rate-based load like requests per second, but not other
    // non-rate based load like size of cached components.
    uint64 version = 2;
  }

  // SliceLoad includes the load of a slice, [start, end).
  message SliceLoad {
    uint64 start = 1;  // inclusive
    uint64 end = 2;    // exclusive
    double load = 3;
    repeated SubsliceLoad splits = 4;

    // The "size" of the slice. Given a slice [a, b), it's tempting to think
    // the slice has size b - a. This has a couple of problems.
    //
    //     1. Even if a slice is large, only a few keys in the slice may be
    //        used. For example, a weavelet with slice [0, 2^60) may only
    //        receive requests for keys in the range [0, 100).
    //     2. a and b are not necessarily numeric. Imagine we are performing
    //        range sharding on strings and have the slice ["ccbae",
    //        "hhaefi"). What is the size of this slice?
    //
    // We instead measure the "size" of a slice as an estimate of the number
    // of keys accessed in the slice. For example, if a slice [0, 1000)
    // receives requests for keys 0, 1, 2, 3, and 10, then the size of the
    // slice is 5.
    uint64 size = 5;
  }

  // SubsliceLoad divides the load of a slice into smaller subslices. For
  // example, given a slice [0, 100) and load 9.0, we may have the following
  // subslices:
  //
  //     SubsliceLoad{Start:  0, Load: 3.0} // [0, 20)
  //     SubsliceLoad{Start: 20, Load: 3.0} // [20, 80)
  //     SubsliceLoad{Start: 80, Load: 3.0} // [80, 100)
  //
  // TODO(mwhittaker): In the future, we likely want to report hot keys as
  // their own slice. Change SubsliceLoad to support that.
  message SubsliceLoad {
    uint64 start = 1;
    double load = 2;
  }
}

// GetProfileRequest is a request from an envelope for a weavelet to collect and
// return a profile. There can only be one outstanding GetProfileRequest at a
// time.
message GetProfileRequest {
  // Type of the profile (e.g., heap, cpu).
  ProfileType profile_type = 1;

  // Duration of CPU profiles, in nanoseconds.
  int64 cpu_duration_ns = 2;
}

// GetProfileReply is a reply to a GetProfileRequest.
message GetProfileReply {
  bytes data = 1;  // encoded profile data
}

// ProfileType specifies a type of profile.
enum ProfileType {
  Unspecified = 0;
  Heap = 1;
  CPU = 2;
}

// UpdateRoutingInfoRequest is a request from an envelope to the weavelet to
// update its routing information for a particular component.
message UpdateRoutingInfoRequest {
  RoutingInfo routing_info = 1;
}

// UpdateRoutingInfoReply is a reply to an UpdateRoutingInfoRequest.
message UpdateRoutingInfoReply {}

// RoutingInfo contains routing information for a component. A weavelet uses a
// RoutingInfo to know where to send a remote method call.
message RoutingInfo {
  string component = 1;

  // If true, perform method calls on the component locally. Replicas and
  // assignment are ignored. Currently, local must always be true or always be
  // false for a given component.
  bool local = 2;

  // The addresses of the weavelets hosting a replica of the component. Every
  // address is of the form "<net>://<addr>" (e.g., "tcp://host:1234",
  // "unix:///tmp/unix.sock"). For non-local components, a weavelet will execute
  // method calls on one of these replicas.
  repeated string replicas = 3;

  // Routing assignment, if the component is routed.
  Assignment assignment = 4;
}

// Assignment partitions a key space (e.g., the hash space [0, 2^64)) into a set
// of subregions, called slices, and assigns each slice to a set of replicas.
message Assignment {
  // A slice of the key space and the replicas to which it is assigned.
  message Slice {
    // Inclusive start key. Strictly greater than the `start` value for the
    // previous entry in the current assignment.
    //
    // The first slice should always set start to 0.
    uint64 start = 1;

    // Replicas assigned to host this slice. Every address is of the form
    // "<net>://<addr>" (e.g., "tcp://host:1234", "unix:///tmp/unix.sock").
    repeated string replicas = 2;
  }

  repeated Slice slices = 1;

  // The assignment for a component can change over time. Every one of these
  // assignments is given a monotonically increasing version. Versions are
  // unique for a given component, but not unique across components.
  uint64 version = 2;
}

// UpdateComponentsRequest is a request from an envelope to the weavelet to
// update the set of components it should be running. Currently, the set of
// components must only ever increase over time.
message UpdateComponentsRequest {
  repeated string components = 1;
}

// UpdateComponentsReply is a reply to an UpdateComponentsRequest.
message UpdateComponentsReply {}

// ActivateComponentRequest is a request from a weavelet to ensure that the
// provided component is running somewhere. An ActivateComponentRequest also
// implicitly signals that a weavelet is interested in receiving routing info
// for the component via UpdateRoutingInfoRequest.
message ActivateComponentRequest {
  string component = 1;  // component name
  bool routed = 2;       // is the component routed?
}

// ActivateComponentReply is a reply to an ActivateComponentRequest.
message ActivateComponentReply {}

// GetListenerAddressRequest is a request from a weavelet for the address the
// weavelet should listen on for a particular listener.
//
// Imagine a weavelet calls GetListener with LocalAdress localhost:9000. Here
// are some examples of how different deployers may handle a
// GetListenerAddressRequest.
//
//  - The singleprocess deployer may instruct the weavelet to listen directly
//    on localhost:9000.
//  - The multiprocess deployer may instruct the weavelet to listen on
//    localhost:0. It will separately start a proxy on localhost:9000.
//  - The SSH deployer may instruct the weavelet to listen on
//    $HOSTNAME:0. It will separately start a proxy on localhost:9000.
message GetListenerAddressRequest {
  string name = 1;           // listener name
}

// GetListenerAddressReply is a reply to a GetListenerAddressRequest.
message GetListenerAddressReply {
  string address = 1;  // address to listen on
}

// ExportListenerRequest is a request from a weavelet to export the provided
// listener. Exporting a listener typically, but not always, involves running a
// proxy that forwards traffic to the provided address.
message ExportListenerRequest {
  string listener = 1;
  string address = 2;
}

// ExportListenerReply is a reply to an ExportListenerRequest.
message ExportListenerReply {
  // The address of the proxy that forwards traffic to the listener, or empty if
  // there is no proxy.
  string proxy_address = 1;

  // If non-empty, a non-retriable error.
  //
  // TODO(mwhittaker): This field exists as a hack to avoid a weavelet retrying
  // this error. In the future, we should have a more robust way to avoid
  // retrying certain errors.
  string error = 2;
}

// GetSelfCertificateRequest is a request from a weavelet for its certificate
// and the corresponding private key.
message GetSelfCertificateRequest {}

// GetSelfCertificateReply is a reply to a GetSelfCertificateRequest.
message GetSelfCertificateReply {
  // PEM-encoded blocks containing (1) the certificate identifying the
  // weavelet and (2) the corresponding private key. Used for enforcing mTLS
  // security across components.
  bytes cert = 1; // certificate identifying the weavelet
  bytes key = 2;  // private key corresponding to cert
}

// VerifyClientCertificateRequest is a request from a weavelet to verify
// the identity of a client that is attempting to connect to the weavelet.
message VerifyClientCertificateRequest {
  // Client's certificate chain. Each certificate in the chain is represented as
  // a DER-encoded ASN.1 structure.
  repeated bytes cert_chain = 1;
}

// VerifyClientCertificateReply is a reply to a VerifyClientCertificateRequest.
// If the client certificate cannot be verified, an error should be returned
// rather than an empty reply.
message VerifyClientCertificateReply {
  // The set of components hosted by the weavelet that the client is allowed to
  // invoke methods on.
  repeated string components = 1;
}

// VerifyServerCertificateRequest is a request from a weavelet to verify
// the identity of the server it is attempting to connect to.
message VerifyServerCertificateRequest {
  // Server's certificate chain. Each certificate in the chain is represented as
  // a DER-encoded ASN.1 structure.
  repeated bytes cert_chain = 1;

  // Name of the component the server is meant to be hosting.
  string target_component = 2;
}

// VerifyServerCertificateReply is a reply to a VerifyServerCertificateRequest.
message VerifyServerCertificateReply {}

// LogEntry is a log entry. Every log entry consists of a message (the thing the
// user logged) and a set of metadata describing the message.
message LogEntry {
  string app = 1;            // application name
  string version = 2;        // deployment id
  string component = 3;      // component name
  string node = 4;           // weavelet id
  sfixed64 time_micros = 5;  // time when logged (microseconds since epoch)
  string level = 6;          // log level (e.g., debug, info, error)
  string file = 7;           // source file
  int32 line = 8;            // source line
  string msg = 9;            // user provided message

  // User-provided attributes and their associated values. The storage format
  // is a name followed by its value, i.e.:
  //   name1, value1, name2, value2, name3, value3, ...
  repeated string attrs = 10;
}

// TraceSpans is a list of Span messages.
message TraceSpans {
  repeated Span span = 1;
}

// Span is a proto-based representation of an open-telemetry Span [1].
//
// [1]: https://opentelemetry.io/docs/concepts/signals/traces/#spans
// TODO(spetrovic): Rename to TraceSpan.
message Span {
  string name = 1;            // Span name
  bytes trace_id = 2;         // Span trace id, 16 bytes long.
  bytes span_id = 3;          // Unique span id, 8 bytes long.
  bytes parent_span_id = 4;   // Parent span id, 8 bytes long

  // Span's role in the trace.
  enum Kind {
    UNSPECIFIED = 0;
    INTERNAL = 1;
    SERVER = 2;
    CLIENT = 3;
    PRODUCER = 4;
    CONSUMER = 5;
  }
  Kind kind = 5;

  sfixed64 start_micros = 6;  // Span start time (microseconds since epoch)
  sfixed64 end_micros = 7;    // Span end time (microseconds since epoch)

  // Span attributes.
  message Attribute {
    message Value {
      // Type describes the type of the value.
      enum Type {
        INVALID = 0;  // Used when no value is set
        BOOL = 1;
        INT64 = 2;
        FLOAT64 = 3;
        STRING = 4;
        BOOLLIST = 5;
        INT64LIST = 6;
        FLOAT64LIST = 7;
        STRINGLIST = 8;
      }
      message NumberList {
        repeated uint64 nums = 1;
      }
      message StringList {
        repeated string strs = 2;
      }
      Type type = 1;  // Attribute type
      oneof value {
        uint64 num = 2;
        string str = 3;
        NumberList nums = 4;
        StringList strs = 5;
      }
    }
    string key = 1;
    Value value = 2;
  }  
  repeated Attribute attributes = 8;

  // Link represents the link a span has to another span.
  message Link {
    bytes trace_id = 1;                 // Span trace id
    bytes span_id = 2;                  // Unique span id
    repeated Attribute attributes = 3;  // Span attributes

    // Number of span attributes dropped due to limits being reached
    int64 dropped_attribute_count = 4;
  }
  repeated Link links = 9;  // Links to other spans

  // Event represent an event that occurred in the span's lifetime.
  message Event {
    string name = 1;           // Even name
    sfixed64 time_micros = 2;  // Time event was recorded (micros since epoch)
    repeated Attribute attributes = 3;  // Event attributes

    // Number of attributes dropped due to limits being reached.
    int64 dropped_attribute_count = 4;
  }
  repeated Event events = 10;  // Events that occured in the span's lifetime

  // Status represents the status for a span.
  message Status {
    enum Code {
      UNSET = 0;
      ERROR = 1;
      OK = 2;
    }
    Code code = 1;     // Span status code
    string error = 2;  // Error text; set only for an ERROR code
  }
  Status status = 11;  // Span status

  // Scope stores information about the instrumentation scope that created the span.
  message Scope {
    // Name of the instrumentation library, typically the package name of
    // the library.
    string name = 1;
    string version = 2;     // The version of the instrumentation scope
    string schema_url = 3;  // Schema url of the telemetry emitted by scope
  }
  Scope scope = 18;

  // Library stores information about the instrumentation library that
  // created the span.
  message Library {
    // Name of the instrumentation library, typically the package name of
    // the library.
    string name = 1;
    string version = 2;     // The version of the instrumentation library
    string schema_url = 3;  // Schema url of the telemetry emitted by library
  }
  Library library = 12;  // Instrumentation library that created the span

  // Resource describes an entity (e.g., a Service Weaver component) this span
  // belongs to.
  message Resource {
    // URL that describes the shape and a composition of data for this span.
    string schema_url = 1;

    repeated Attribute attributes = 2;  // Resource attributes
  }
  Resource resource = 13;

  // Number of span attributes dropped due to limits being reached.
  int64 dropped_attribute_count = 14;

  // Number of links dropped due to limits being reached.
  int64 dropped_link_count = 15;

  // Number of events dropped due to limits being reached.
  int64 dropped_event_count = 16;

  // Number of spans that consider this span a direct parent.
  int64 child_span_count = 17;
}
