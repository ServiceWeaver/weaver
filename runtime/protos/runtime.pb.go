// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: runtime/protos/runtime.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProfileType specifies a type of profile to collect.
type ProfileType int32

const (
	ProfileType_Unspecified ProfileType = 0
	ProfileType_Heap        ProfileType = 1
	ProfileType_CPU         ProfileType = 2
)

// Enum value maps for ProfileType.
var (
	ProfileType_name = map[int32]string{
		0: "Unspecified",
		1: "Heap",
		2: "CPU",
	}
	ProfileType_value = map[string]int32{
		"Unspecified": 0,
		"Heap":        1,
		"CPU":         2,
	}
)

func (x ProfileType) Enum() *ProfileType {
	p := new(ProfileType)
	*p = x
	return p
}

func (x ProfileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileType) Descriptor() protoreflect.EnumDescriptor {
	return file_runtime_protos_runtime_proto_enumTypes[0].Descriptor()
}

func (ProfileType) Type() protoreflect.EnumType {
	return &file_runtime_protos_runtime_proto_enumTypes[0]
}

func (x ProfileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileType.Descriptor instead.
func (ProfileType) EnumDescriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{0}
}

// HealthStatus specifies the possible types of health status for a replica.
type HealthStatus int32

const (
	HealthStatus_UNKNOWN    HealthStatus = 0
	HealthStatus_HEALTHY    HealthStatus = 1
	HealthStatus_UNHEALTHY  HealthStatus = 2
	HealthStatus_TERMINATED HealthStatus = 3
)

// Enum value maps for HealthStatus.
var (
	HealthStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "HEALTHY",
		2: "UNHEALTHY",
		3: "TERMINATED",
	}
	HealthStatus_value = map[string]int32{
		"UNKNOWN":    0,
		"HEALTHY":    1,
		"UNHEALTHY":  2,
		"TERMINATED": 3,
	}
)

func (x HealthStatus) Enum() *HealthStatus {
	p := new(HealthStatus)
	*p = x
	return p
}

func (x HealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_runtime_protos_runtime_proto_enumTypes[1].Descriptor()
}

func (HealthStatus) Type() protoreflect.EnumType {
	return &file_runtime_protos_runtime_proto_enumTypes[1]
}

func (x HealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthStatus.Descriptor instead.
func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{1}
}

// MetricType specifies a particular kind of metric.
type MetricType int32

const (
	MetricType_INVALID   MetricType = 0
	MetricType_COUNTER   MetricType = 1
	MetricType_GAUGE     MetricType = 2
	MetricType_HISTOGRAM MetricType = 3
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "INVALID",
		1: "COUNTER",
		2: "GAUGE",
		3: "HISTOGRAM",
	}
	MetricType_value = map[string]int32{
		"INVALID":   0,
		"COUNTER":   1,
		"GAUGE":     2,
		"HISTOGRAM": 3,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_runtime_protos_runtime_proto_enumTypes[2].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_runtime_protos_runtime_proto_enumTypes[2]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{2}
}

// SpanKind is the role a span plays in a trace.
type SpanKind int32

const (
	SpanKind_UNSPECIFIED SpanKind = 0
	SpanKind_INTERNAL    SpanKind = 1
	SpanKind_SERVER      SpanKind = 2
	SpanKind_CLIENT      SpanKind = 3
	SpanKind_PRODUCER    SpanKind = 4
	SpanKind_CONSUMER    SpanKind = 5
)

// Enum value maps for SpanKind.
var (
	SpanKind_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "INTERNAL",
		2: "SERVER",
		3: "CLIENT",
		4: "PRODUCER",
		5: "CONSUMER",
	}
	SpanKind_value = map[string]int32{
		"UNSPECIFIED": 0,
		"INTERNAL":    1,
		"SERVER":      2,
		"CLIENT":      3,
		"PRODUCER":    4,
		"CONSUMER":    5,
	}
)

func (x SpanKind) Enum() *SpanKind {
	p := new(SpanKind)
	*p = x
	return p
}

func (x SpanKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanKind) Descriptor() protoreflect.EnumDescriptor {
	return file_runtime_protos_runtime_proto_enumTypes[3].Descriptor()
}

func (SpanKind) Type() protoreflect.EnumType {
	return &file_runtime_protos_runtime_proto_enumTypes[3]
}

func (x SpanKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanKind.Descriptor instead.
func (SpanKind) EnumDescriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{3}
}

type Span_Status_Code int32

const (
	Span_Status_UNSET Span_Status_Code = 0
	Span_Status_ERROR Span_Status_Code = 1
	Span_Status_OK    Span_Status_Code = 2
)

// Enum value maps for Span_Status_Code.
var (
	Span_Status_Code_name = map[int32]string{
		0: "UNSET",
		1: "ERROR",
		2: "OK",
	}
	Span_Status_Code_value = map[string]int32{
		"UNSET": 0,
		"ERROR": 1,
		"OK":    2,
	}
)

func (x Span_Status_Code) Enum() *Span_Status_Code {
	p := new(Span_Status_Code)
	*p = x
	return p
}

func (x Span_Status_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Span_Status_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_runtime_protos_runtime_proto_enumTypes[4].Descriptor()
}

func (Span_Status_Code) Type() protoreflect.EnumType {
	return &file_runtime_protos_runtime_proto_enumTypes[4]
}

func (x Span_Status_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Span_Status_Code.Descriptor instead.
func (Span_Status_Code) EnumDescriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{27, 2, 0}
}

// Type describes the type of the value.
type Attribute_Value_Type int32

const (
	Attribute_Value_INVALID     Attribute_Value_Type = 0 // Used when no value is set
	Attribute_Value_BOOL        Attribute_Value_Type = 1
	Attribute_Value_INT64       Attribute_Value_Type = 2
	Attribute_Value_FLOAT64     Attribute_Value_Type = 3
	Attribute_Value_STRING      Attribute_Value_Type = 4
	Attribute_Value_BOOLLIST    Attribute_Value_Type = 5
	Attribute_Value_INT64LIST   Attribute_Value_Type = 6
	Attribute_Value_FLOAT64LIST Attribute_Value_Type = 7
	Attribute_Value_STRINGLIST  Attribute_Value_Type = 8
)

// Enum value maps for Attribute_Value_Type.
var (
	Attribute_Value_Type_name = map[int32]string{
		0: "INVALID",
		1: "BOOL",
		2: "INT64",
		3: "FLOAT64",
		4: "STRING",
		5: "BOOLLIST",
		6: "INT64LIST",
		7: "FLOAT64LIST",
		8: "STRINGLIST",
	}
	Attribute_Value_Type_value = map[string]int32{
		"INVALID":     0,
		"BOOL":        1,
		"INT64":       2,
		"FLOAT64":     3,
		"STRING":      4,
		"BOOLLIST":    5,
		"INT64LIST":   6,
		"FLOAT64LIST": 7,
		"STRINGLIST":  8,
	}
)

func (x Attribute_Value_Type) Enum() *Attribute_Value_Type {
	p := new(Attribute_Value_Type)
	*p = x
	return p
}

func (x Attribute_Value_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Attribute_Value_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_runtime_protos_runtime_proto_enumTypes[5].Descriptor()
}

func (Attribute_Value_Type) Type() protoreflect.EnumType {
	return &file_runtime_protos_runtime_proto_enumTypes[5]
}

func (x Attribute_Value_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Attribute_Value_Type.Descriptor instead.
func (Attribute_Value_Type) EnumDescriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{29, 0, 0}
}

// EnvelopeMsg holds a message sent by the envelope to the managed weavelet.
type EnvelopeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id identifies a request that is part of a synchronous call. A
	// request with positive id x expects a reply with negative id -x.
	// Non-synchronous calls have an id of 0.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// A request to the weavelet to send its current metrics.
	SendMetrics bool `protobuf:"varint,2,opt,name=send_metrics,json=sendMetrics,proto3" json:"send_metrics,omitempty"`
	// A request to the weavelet to send its health status.
	SendHealthStatus bool `protobuf:"varint,3,opt,name=send_health_status,json=sendHealthStatus,proto3" json:"send_health_status,omitempty"`
	// A request to the weavelet to send the latest load information.
	SendLoadInfo bool `protobuf:"varint,11,opt,name=send_load_info,json=sendLoadInfo,proto3" json:"send_load_info,omitempty"`
	// A request to the weavelet to profile itself and send back the profile
	// data.
	RunProfiling *RunProfiling `protobuf:"bytes,4,opt,name=run_profiling,json=runProfiling,proto3" json:"run_profiling,omitempty"`
	// Setup information sent to the weavelet. This is the first message sent to
	// the weavelet on the connection. Upon receiving the message, the weavelet
	// immediately replies with WeaveletInfo.
	WeaveletSetupInfo *WeaveletSetupInfo `protobuf:"bytes,5,opt,name=weavelet_setup_info,json=weaveletSetupInfo,proto3" json:"weavelet_setup_info,omitempty"`
	// A reply to the weavelet with the latest routing info.
	RoutingInfo *RoutingInfo `protobuf:"bytes,6,opt,name=routing_info,json=routingInfo,proto3" json:"routing_info,omitempty"`
	// A reply to the weavelet with the latest list of components to start.
	ComponentsToStart *ComponentsToStart `protobuf:"bytes,7,opt,name=components_to_start,json=componentsToStart,proto3" json:"components_to_start,omitempty"`
	// A reply to a GetAddressRequest.
	GetAddressReply *GetAddressReply `protobuf:"bytes,8,opt,name=get_address_reply,json=getAddressReply,proto3" json:"get_address_reply,omitempty"`
	// A reply to an ExportListenerRequest.
	ExportListenerReply *ExportListenerReply `protobuf:"bytes,9,opt,name=export_listener_reply,json=exportListenerReply,proto3" json:"export_listener_reply,omitempty"`
	// A reply to the weavelet with an error status.
	Error string `protobuf:"bytes,10,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *EnvelopeMsg) Reset() {
	*x = EnvelopeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvelopeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopeMsg) ProtoMessage() {}

func (x *EnvelopeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopeMsg.ProtoReflect.Descriptor instead.
func (*EnvelopeMsg) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{0}
}

func (x *EnvelopeMsg) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EnvelopeMsg) GetSendMetrics() bool {
	if x != nil {
		return x.SendMetrics
	}
	return false
}

func (x *EnvelopeMsg) GetSendHealthStatus() bool {
	if x != nil {
		return x.SendHealthStatus
	}
	return false
}

func (x *EnvelopeMsg) GetSendLoadInfo() bool {
	if x != nil {
		return x.SendLoadInfo
	}
	return false
}

func (x *EnvelopeMsg) GetRunProfiling() *RunProfiling {
	if x != nil {
		return x.RunProfiling
	}
	return nil
}

func (x *EnvelopeMsg) GetWeaveletSetupInfo() *WeaveletSetupInfo {
	if x != nil {
		return x.WeaveletSetupInfo
	}
	return nil
}

func (x *EnvelopeMsg) GetRoutingInfo() *RoutingInfo {
	if x != nil {
		return x.RoutingInfo
	}
	return nil
}

func (x *EnvelopeMsg) GetComponentsToStart() *ComponentsToStart {
	if x != nil {
		return x.ComponentsToStart
	}
	return nil
}

func (x *EnvelopeMsg) GetGetAddressReply() *GetAddressReply {
	if x != nil {
		return x.GetAddressReply
	}
	return nil
}

func (x *EnvelopeMsg) GetExportListenerReply() *ExportListenerReply {
	if x != nil {
		return x.ExportListenerReply
	}
	return nil
}

func (x *EnvelopeMsg) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// WeaveletMsg holds a message sent by a weavelet to the envelope that manages
// it.
type WeaveletMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id identifies the request for which this message is a reply.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Updated metrics.
	Metrics *MetricUpdate `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// Latest log entry.
	LogEntry *LogEntry `protobuf:"bytes,3,opt,name=log_entry,json=logEntry,proto3" json:"log_entry,omitempty"`
	// Trace spans to be exported.
	TraceSpans *Spans `protobuf:"bytes,4,opt,name=trace_spans,json=traceSpans,proto3" json:"trace_spans,omitempty"`
	// Component to be started.
	ComponentToStart *ComponentToStart `protobuf:"bytes,5,opt,name=component_to_start,json=componentToStart,proto3" json:"component_to_start,omitempty"`
	// Weavelet load to be reported.
	LoadReport *WeaveletLoadReport `protobuf:"bytes,8,opt,name=load_report,json=loadReport,proto3" json:"load_report,omitempty"`
	// Updated health status.
	HealthReport *HealthReport `protobuf:"bytes,9,opt,name=health_report,json=healthReport,proto3" json:"health_report,omitempty"`
	// Weavelet profile.
	Profile *Profile `protobuf:"bytes,10,opt,name=profile,proto3" json:"profile,omitempty"`
	// Information sent back by the weavelet upon startup.
	WeaveletInfo *WeaveletInfo `protobuf:"bytes,16,opt,name=weavelet_info,json=weaveletInfo,proto3" json:"weavelet_info,omitempty"`
	// A reply to the envelope with an error status.
	Error string `protobuf:"bytes,11,opt,name=error,proto3" json:"error,omitempty"`
	// Request to get the address for a listener.
	GetAddressRequest *GetAddressRequest `protobuf:"bytes,14,opt,name=get_address_request,json=getAddressRequest,proto3" json:"get_address_request,omitempty"`
	// Request to export a listener.
	ExportListenerRequest *ExportListenerRequest `protobuf:"bytes,15,opt,name=export_listener_request,json=exportListenerRequest,proto3" json:"export_listener_request,omitempty"`
}

func (x *WeaveletMsg) Reset() {
	*x = WeaveletMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaveletMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaveletMsg) ProtoMessage() {}

func (x *WeaveletMsg) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaveletMsg.ProtoReflect.Descriptor instead.
func (*WeaveletMsg) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{1}
}

func (x *WeaveletMsg) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WeaveletMsg) GetMetrics() *MetricUpdate {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *WeaveletMsg) GetLogEntry() *LogEntry {
	if x != nil {
		return x.LogEntry
	}
	return nil
}

func (x *WeaveletMsg) GetTraceSpans() *Spans {
	if x != nil {
		return x.TraceSpans
	}
	return nil
}

func (x *WeaveletMsg) GetComponentToStart() *ComponentToStart {
	if x != nil {
		return x.ComponentToStart
	}
	return nil
}

func (x *WeaveletMsg) GetLoadReport() *WeaveletLoadReport {
	if x != nil {
		return x.LoadReport
	}
	return nil
}

func (x *WeaveletMsg) GetHealthReport() *HealthReport {
	if x != nil {
		return x.HealthReport
	}
	return nil
}

func (x *WeaveletMsg) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *WeaveletMsg) GetWeaveletInfo() *WeaveletInfo {
	if x != nil {
		return x.WeaveletInfo
	}
	return nil
}

func (x *WeaveletMsg) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *WeaveletMsg) GetGetAddressRequest() *GetAddressRequest {
	if x != nil {
		return x.GetAddressRequest
	}
	return nil
}

func (x *WeaveletMsg) GetExportListenerRequest() *ExportListenerRequest {
	if x != nil {
		return x.ExportListenerRequest
	}
	return nil
}

// Deployment holds internal information necessary for an application
// deployment.
type Deployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier for the deployment.
	// Application configuration.
	App *AppConfig `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
	// Run as a single process locally.
	SingleProcess bool `protobuf:"varint,10,opt,name=single_process,json=singleProcess,proto3" json:"single_process,omitempty"`
}

func (x *Deployment) Reset() {
	*x = Deployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment) ProtoMessage() {}

func (x *Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment.ProtoReflect.Descriptor instead.
func (*Deployment) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{2}
}

func (x *Deployment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Deployment) GetApp() *AppConfig {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *Deployment) GetSingleProcess() bool {
	if x != nil {
		return x.SingleProcess
	}
	return false
}

// A group of components.
// TODO(spetrovic): Unify with ColocationGroup.
type ComponentGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Components []string `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *ComponentGroup) Reset() {
	*x = ComponentGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentGroup) ProtoMessage() {}

func (x *ComponentGroup) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentGroup.ProtoReflect.Descriptor instead.
func (*ComponentGroup) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{3}
}

func (x *ComponentGroup) GetComponents() []string {
	if x != nil {
		return x.Components
	}
	return nil
}

// AppConfig holds configuration for a Service Weaver application.
type AppConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Application name (derived from binary if missing).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// File name of the binary that implements the app.
	Binary string `protobuf:"bytes,1,opt,name=binary,proto3" json:"binary,omitempty"`
	// Arguments to pass to the binary.
	Args []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// Environment variables available to the binary. Every entry should be of the
	// form "key=value". If a key appears more than once, only the last value of
	// the key is used.
	Env []string `protobuf:"bytes,6,rep,name=env,proto3" json:"env,omitempty"`
	// Groups of components that must be co-located together in the same OS
	// process.
	//
	// This grouping allows the developer a level of control on where the
	// Service Weaver runtime wil place each component. For example, suppose that
	// the application binary contains six components: A, B, C, D, E, and F.
	// Furthermore, suppose that the developer specifies the following
	// grouping in the config.
	//
	//	same_process = [[A, B], [C, D, E]]
	//
	// In that case, no matter what algorithm the Service Weaver runtime uses to
	// place the components, components A and B will always be grouped together,
	// and components C, D, and E will always be grouped together. This means that
	// a pair of replicas of the components can share in-memory state and
	// communicate efficiently with each other (though not with other replicas).
	//
	// The placement algorithm the Service Weaver runtime uses varies across
	// deployment environment. For example, a multiprocess deployer may choose
	// to place each component into its own group, for maximum parallelism. A
	// singleprocess deployer, on the other hand, may choose to group all of the
	// components together. Regardless of which deployment environment is used,
	// however, this configuration option guarantees that specified components
	// will end up in the same group.
	//
	// Components are identified using their full package paths, e.g.:
	//
	//	"github.com/my/project/package/ComponentName"
	//
	// , with the exception of the component associated with the application
	// main(), which is identified using the name "main".
	//
	// TODO(spetrovic): Rename to colocate.
	SameProcess []*ComponentGroup `protobuf:"bytes,20,rep,name=same_process,json=sameProcess,proto3" json:"same_process,omitempty"`
	// A knob that lets the user specifies how many nanoseconds it expects for
	// the rollout to take. This is used internally by Service Weaver to figure
	// out the rollout strategy.
	//
	// If not specified, Service Weaver will pick a default value.
	RolloutNanos int64 `protobuf:"varint,4,opt,name=rollout_nanos,json=rolloutNanos,proto3" json:"rollout_nanos,omitempty"`
	// All config sections (includes [serviceweaver], [<deployer>], and
	// [<component>] sections).
	Sections map[string]string `protobuf:"bytes,7,rep,name=sections,proto3" json:"sections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AppConfig) Reset() {
	*x = AppConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppConfig) ProtoMessage() {}

func (x *AppConfig) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppConfig.ProtoReflect.Descriptor instead.
func (*AppConfig) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{4}
}

func (x *AppConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppConfig) GetBinary() string {
	if x != nil {
		return x.Binary
	}
	return ""
}

func (x *AppConfig) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *AppConfig) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *AppConfig) GetSameProcess() []*ComponentGroup {
	if x != nil {
		return x.SameProcess
	}
	return nil
}

func (x *AppConfig) GetRolloutNanos() int64 {
	if x != nil {
		return x.RolloutNanos
	}
	return 0
}

func (x *AppConfig) GetSections() map[string]string {
	if x != nil {
		return x.Sections
	}
	return nil
}

// A colocation group defines a set of components that are colocated together
// on the same machine or a VM. A colocation group may be replicated, in which
// case the communication between components in the same colocation group
// replica remains local to that replica.
type ColocationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ColocationGroup) Reset() {
	*x = ColocationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColocationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColocationGroup) ProtoMessage() {}

func (x *ColocationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColocationGroup.ProtoReflect.Descriptor instead.
func (*ColocationGroup) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{5}
}

func (x *ColocationGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// WeaveletSetupInfo contains the setup information provided to a weavelet
// from its deployer.
type WeaveletSetupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App          string           `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`                                       // app name
	DeploymentId string           `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"` // deployment id, in UUID format
	Group        *ColocationGroup `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`                                   // colocation group
	GroupId      string           `protobuf:"bytes,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                // colocation group replica id
	Id           string           `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`                                         // weavelet id, in UUID format
	// TODO(spetrovic): Rename to same_group.
	SameProcess   []*ComponentGroup `protobuf:"bytes,6,rep,name=same_process,json=sameProcess,proto3" json:"same_process,omitempty"`                                                                // See AppConfig.SameProcess.
	Sections      map[string]string `protobuf:"bytes,7,rep,name=sections,proto3" json:"sections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // See AppConfig.Sections.
	SingleProcess bool              `protobuf:"varint,8,opt,name=single_process,json=singleProcess,proto3" json:"single_process,omitempty"`                                                         // a single-process deployment?
	SingleMachine bool              `protobuf:"varint,9,opt,name=single_machine,json=singleMachine,proto3" json:"single_machine,omitempty"`                                                         // a single-machine deployment?
}

func (x *WeaveletSetupInfo) Reset() {
	*x = WeaveletSetupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaveletSetupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaveletSetupInfo) ProtoMessage() {}

func (x *WeaveletSetupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaveletSetupInfo.ProtoReflect.Descriptor instead.
func (*WeaveletSetupInfo) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{6}
}

func (x *WeaveletSetupInfo) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *WeaveletSetupInfo) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *WeaveletSetupInfo) GetGroup() *ColocationGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *WeaveletSetupInfo) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *WeaveletSetupInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WeaveletSetupInfo) GetSameProcess() []*ComponentGroup {
	if x != nil {
		return x.SameProcess
	}
	return nil
}

func (x *WeaveletSetupInfo) GetSections() map[string]string {
	if x != nil {
		return x.Sections
	}
	return nil
}

func (x *WeaveletSetupInfo) GetSingleProcess() bool {
	if x != nil {
		return x.SingleProcess
	}
	return false
}

func (x *WeaveletSetupInfo) GetSingleMachine() bool {
	if x != nil {
		return x.SingleMachine
	}
	return false
}

// WeaveletInfo contains information provided to the deployer by a running
// weavelet.
type WeaveletInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Internal TCP address of the weavelet. This address will be passed to other
	// weavelets as part of their RoutingInfo.
	DialAddr string `protobuf:"bytes,1,opt,name=dial_addr,json=dialAddr,proto3" json:"dial_addr,omitempty"`
	// Pid for the weavelet OS process.
	Pid int64 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *WeaveletInfo) Reset() {
	*x = WeaveletInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaveletInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaveletInfo) ProtoMessage() {}

func (x *WeaveletInfo) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaveletInfo.ProtoReflect.Descriptor instead.
func (*WeaveletInfo) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{7}
}

func (x *WeaveletInfo) GetDialAddr() string {
	if x != nil {
		return x.DialAddr
	}
	return ""
}

func (x *WeaveletInfo) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

// RoutingInfo contains routing information for a component.
type RoutingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component string `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// Each replica is a string of the form "<net>://<addr>". E.g.,
	//
	//	tcp://host:1234
	//	unix:///tmp/unix.sock
	Replicas []string `protobuf:"bytes,2,rep,name=replicas,proto3" json:"replicas,omitempty"`
	// Routing assignment, if the component is routed.
	Assignment *Assignment `protobuf:"bytes,3,opt,name=assignment,proto3" json:"assignment,omitempty"`
}

func (x *RoutingInfo) Reset() {
	*x = RoutingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingInfo) ProtoMessage() {}

func (x *RoutingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingInfo.ProtoReflect.Descriptor instead.
func (*RoutingInfo) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{8}
}

func (x *RoutingInfo) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *RoutingInfo) GetReplicas() []string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *RoutingInfo) GetAssignment() *Assignment {
	if x != nil {
		return x.Assignment
	}
	return nil
}

// RunProfiling is a request to profile the given application version.
type RunProfiling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName   string `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	Group     string `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"` // If non-empty, only profile the given colocation group.
	// Type of the profile we want to collect (e.g., heap, cpu).
	ProfileType ProfileType `protobuf:"varint,4,opt,name=profile_type,json=profileType,proto3,enum=runtime.ProfileType" json:"profile_type,omitempty"`
	// Duration for the CPU profile collection, in nanoseconds.
	CpuDurationNs int64 `protobuf:"varint,5,opt,name=cpu_duration_ns,json=cpuDurationNs,proto3" json:"cpu_duration_ns,omitempty"`
}

func (x *RunProfiling) Reset() {
	*x = RunProfiling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunProfiling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunProfiling) ProtoMessage() {}

func (x *RunProfiling) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunProfiling.ProtoReflect.Descriptor instead.
func (*RunProfiling) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{9}
}

func (x *RunProfiling) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *RunProfiling) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *RunProfiling) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *RunProfiling) GetProfileType() ProfileType {
	if x != nil {
		return x.ProfileType
	}
	return ProfileType_Unspecified
}

func (x *RunProfiling) GetCpuDurationNs() int64 {
	if x != nil {
		return x.CpuDurationNs
	}
	return 0
}

// Profile stores profile data for a given application version.
type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName   string `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	Data      []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` // Encoded profile data.
	// Errors encountered collecting the profile data.
	// Note that the profile data may be partially populated even if there are
	// collection errors.
	Errors []string `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{10}
}

func (x *Profile) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Profile) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *Profile) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Profile) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// HealthReport contains the health report for a given replica.
type HealthReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status HealthStatus `protobuf:"varint,1,opt,name=status,proto3,enum=runtime.HealthStatus" json:"status,omitempty"`
}

func (x *HealthReport) Reset() {
	*x = HealthReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthReport) ProtoMessage() {}

func (x *HealthReport) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthReport.ProtoReflect.Descriptor instead.
func (*HealthReport) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{11}
}

func (x *HealthReport) GetStatus() HealthStatus {
	if x != nil {
		return x.Status
	}
	return HealthStatus_UNKNOWN
}

// ComponentToStart is a request to the envelope to register a component that
// should be started by the given colocation group.
type ComponentToStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component string `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	Routed    bool   `protobuf:"varint,2,opt,name=routed,proto3" json:"routed,omitempty"` // whether the component is routed
}

func (x *ComponentToStart) Reset() {
	*x = ComponentToStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentToStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentToStart) ProtoMessage() {}

func (x *ComponentToStart) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentToStart.ProtoReflect.Descriptor instead.
func (*ComponentToStart) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{12}
}

func (x *ComponentToStart) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *ComponentToStart) GetRouted() bool {
	if x != nil {
		return x.Routed
	}
	return false
}

// ComponentsToStart includes the latest set of components a weavelet should be
// running. Currently, the set of components must only grow over time.
type ComponentsToStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Components []string `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *ComponentsToStart) Reset() {
	*x = ComponentsToStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentsToStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsToStart) ProtoMessage() {}

func (x *ComponentsToStart) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsToStart.ProtoReflect.Descriptor instead.
func (*ComponentsToStart) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{13}
}

func (x *ComponentsToStart) GetComponents() []string {
	if x != nil {
		return x.Components
	}
	return nil
}

// GetAddressRequest is a request for the address a weavelet should listen on
// for a particular listener.
//
// Imagine a weavelet calls GetListener with LocalAdress localhost:9000. Here
// are some examples of how different deployers may handle a GetAddressRequest.
//
//   - The singleprocess deployer may instruct the weavelet to listen directly
//     on localhost:9000.
//   - The multiprocess deployer may instruct the weavelet to listen on
//     localhost:0. It will separately start a proxy on localhost:9000.
//   - The SSH deployer may instruct the weavelet to listen on
//     $HOSTNAME:0. It will separately start a proxy on localhost:9000.
type GetAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                     // listener name
	LocalAddress string `protobuf:"bytes,2,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"` // LocalAddress argument in ListenerOptions
}

func (x *GetAddressRequest) Reset() {
	*x = GetAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressRequest) ProtoMessage() {}

func (x *GetAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressRequest.ProtoReflect.Descriptor instead.
func (*GetAddressRequest) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{14}
}

func (x *GetAddressRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAddressRequest) GetLocalAddress() string {
	if x != nil {
		return x.LocalAddress
	}
	return ""
}

// GetAddressReply is a reply to a GetAddressRequest.
type GetAddressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // address to listen on
}

func (x *GetAddressReply) Reset() {
	*x = GetAddressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressReply) ProtoMessage() {}

func (x *GetAddressReply) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressReply.ProtoReflect.Descriptor instead.
func (*GetAddressReply) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{15}
}

func (x *GetAddressReply) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// ExportListenerRequest is a request to export the provided listener.
type ExportListenerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Listener     *Listener `protobuf:"bytes,1,opt,name=listener,proto3" json:"listener,omitempty"`                             // listener
	LocalAddress string    `protobuf:"bytes,2,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"` // LocalAddress argument in ListenerOptions
}

func (x *ExportListenerRequest) Reset() {
	*x = ExportListenerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportListenerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportListenerRequest) ProtoMessage() {}

func (x *ExportListenerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportListenerRequest.ProtoReflect.Descriptor instead.
func (*ExportListenerRequest) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{16}
}

func (x *ExportListenerRequest) GetListener() *Listener {
	if x != nil {
		return x.Listener
	}
	return nil
}

func (x *ExportListenerRequest) GetLocalAddress() string {
	if x != nil {
		return x.LocalAddress
	}
	return ""
}

// ExportListenerReply is a reply to a ExportListenerRequest.
type ExportListenerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If non-empty, a non-retriable error.
	//
	// TODO(mwhittaker): This field exists as a hack to avoid a weavelet retrying
	// this error. In the future, we should have a more robust way to avoid
	// retrying certain errors.
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// The address of the proxy that forwards traffic to the returned listener, or
	// empty if there is no proxy.
	ProxyAddress string `protobuf:"bytes,2,opt,name=proxy_address,json=proxyAddress,proto3" json:"proxy_address,omitempty"`
}

func (x *ExportListenerReply) Reset() {
	*x = ExportListenerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportListenerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportListenerReply) ProtoMessage() {}

func (x *ExportListenerReply) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportListenerReply.ProtoReflect.Descriptor instead.
func (*ExportListenerReply) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{17}
}

func (x *ExportListenerReply) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ExportListenerReply) GetProxyAddress() string {
	if x != nil {
		return x.ProxyAddress
	}
	return ""
}

// Listener holds information about a network listener.
type Listener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // listener name
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"` // network address
}

func (x *Listener) Reset() {
	*x = Listener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listener) ProtoMessage() {}

func (x *Listener) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listener.ProtoReflect.Descriptor instead.
func (*Listener) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{18}
}

func (x *Listener) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Listener) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

// Listeners represents a set of network listeners.
type Listeners struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Listeners []*Listener `protobuf:"bytes,1,rep,name=listeners,proto3" json:"listeners,omitempty"`
}

func (x *Listeners) Reset() {
	*x = Listeners{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listeners) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listeners) ProtoMessage() {}

func (x *Listeners) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listeners.ProtoReflect.Descriptor instead.
func (*Listeners) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{19}
}

func (x *Listeners) GetListeners() []*Listener {
	if x != nil {
		return x.Listeners
	}
	return nil
}

// Assignment stores key assignments for a given component.
//
// An assignment partitions a key space (e.g., the hash space [0, 2^64)) into a
// set of subregions, called slices, and assigns each slice to a set of
// replicas.
type Assignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slices []*Assignment_Slice `protobuf:"bytes,1,rep,name=slices,proto3" json:"slices,omitempty"`
	// An assignment is scoped to a particular component in a particular
	// deployment. For example, different components in the same deployment or the
	// same component in different deployments get their own assignments. The
	// assignment for a component can change over time. Every one of these
	// assignments is given a monotonically increasing version. Versions are
	// unique for a given component, but not unique across components.
	App          string `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
	DeploymentId string `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Component    string `protobuf:"bytes,4,opt,name=component,proto3" json:"component,omitempty"`
	Version      uint64 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Assignment) Reset() {
	*x = Assignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment) ProtoMessage() {}

func (x *Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment.ProtoReflect.Descriptor instead.
func (*Assignment) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{20}
}

func (x *Assignment) GetSlices() []*Assignment_Slice {
	if x != nil {
		return x.Slices
	}
	return nil
}

func (x *Assignment) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *Assignment) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *Assignment) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *Assignment) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// WeaveletLoadReport stores load information for all routed components hosted
// by a particular weavelet.
type WeaveletLoadReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App          string                                       `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`                                                                                             // Application name
	DeploymentId string                                       `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`                                                       // Deployment id.
	Group        string                                       `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`                                                                                         // Colocation group.
	Replica      string                                       `protobuf:"bytes,4,opt,name=replica,proto3" json:"replica,omitempty"`                                                                                     // e.g., tcp://124.123.123.412:1291
	Loads        map[string]*WeaveletLoadReport_ComponentLoad `protobuf:"bytes,5,rep,name=loads,proto3" json:"loads,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // load for weavelet's components
}

func (x *WeaveletLoadReport) Reset() {
	*x = WeaveletLoadReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaveletLoadReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaveletLoadReport) ProtoMessage() {}

func (x *WeaveletLoadReport) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaveletLoadReport.ProtoReflect.Descriptor instead.
func (*WeaveletLoadReport) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{21}
}

func (x *WeaveletLoadReport) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *WeaveletLoadReport) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *WeaveletLoadReport) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *WeaveletLoadReport) GetReplica() string {
	if x != nil {
		return x.Replica
	}
	return ""
}

func (x *WeaveletLoadReport) GetLoads() map[string]*WeaveletLoadReport_ComponentLoad {
	if x != nil {
		return x.Loads
	}
	return nil
}

// MetricUpdate contains the metrics' updated values.
type MetricUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metric definitions and updated values.
	//
	// All metrics are identified by their globally unique id. Two endpoints
	// exchanging metric updates must ensure that a received metric value has been
	// preceded by a metric definition with the same id, either in the current
	// update or an earlier one.
	Defs   []*MetricDef   `protobuf:"bytes,1,rep,name=defs,proto3" json:"defs,omitempty"`     // metric definitions
	Values []*MetricValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"` // metric values
}

func (x *MetricUpdate) Reset() {
	*x = MetricUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricUpdate) ProtoMessage() {}

func (x *MetricUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricUpdate.ProtoReflect.Descriptor instead.
func (*MetricUpdate) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{22}
}

func (x *MetricUpdate) GetDefs() []*MetricDef {
	if x != nil {
		return x.Defs
	}
	return nil
}

func (x *MetricUpdate) GetValues() []*MetricValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// MetricDef is the definition of a new metric.
type MetricDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Typ    MetricType        `protobuf:"varint,3,opt,name=typ,proto3,enum=runtime.MetricType" json:"typ,omitempty"`
	Help   string            `protobuf:"bytes,4,opt,name=help,proto3" json:"help,omitempty"`
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Bounds []float64         `protobuf:"fixed64,6,rep,packed,name=bounds,proto3" json:"bounds,omitempty"` // bucket bounds, for histograms
}

func (x *MetricDef) Reset() {
	*x = MetricDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricDef) ProtoMessage() {}

func (x *MetricDef) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricDef.ProtoReflect.Descriptor instead.
func (*MetricDef) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{23}
}

func (x *MetricDef) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MetricDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricDef) GetTyp() MetricType {
	if x != nil {
		return x.Typ
	}
	return MetricType_INVALID
}

func (x *MetricDef) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *MetricDef) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetricDef) GetBounds() []float64 {
	if x != nil {
		return x.Bounds
	}
	return nil
}

// MetricValue is the value associated with a metric.
type MetricValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                // metric's unique id.
	Value  float64  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`         // value for counter and gauge, sum for histogram
	Counts []uint64 `protobuf:"varint,3,rep,packed,name=counts,proto3" json:"counts,omitempty"` // histogram counts
}

func (x *MetricValue) Reset() {
	*x = MetricValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricValue) ProtoMessage() {}

func (x *MetricValue) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricValue.ProtoReflect.Descriptor instead.
func (*MetricValue) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{24}
}

func (x *MetricValue) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MetricValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MetricValue) GetCounts() []uint64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

// MetricSnapshot is a snapshot of a metric. It is the union of a MetricDef and
// a MetricValue.
type MetricSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Typ    MetricType        `protobuf:"varint,3,opt,name=typ,proto3,enum=runtime.MetricType" json:"typ,omitempty"`
	Help   string            `protobuf:"bytes,4,opt,name=help,proto3" json:"help,omitempty"`
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Bounds []float64         `protobuf:"fixed64,6,rep,packed,name=bounds,proto3" json:"bounds,omitempty"`
	Value  float64           `protobuf:"fixed64,7,opt,name=value,proto3" json:"value,omitempty"`
	Counts []uint64          `protobuf:"varint,8,rep,packed,name=counts,proto3" json:"counts,omitempty"`
}

func (x *MetricSnapshot) Reset() {
	*x = MetricSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricSnapshot) ProtoMessage() {}

func (x *MetricSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricSnapshot.ProtoReflect.Descriptor instead.
func (*MetricSnapshot) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{25}
}

func (x *MetricSnapshot) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MetricSnapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricSnapshot) GetTyp() MetricType {
	if x != nil {
		return x.Typ
	}
	return MetricType_INVALID
}

func (x *MetricSnapshot) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *MetricSnapshot) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetricSnapshot) GetBounds() []float64 {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *MetricSnapshot) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MetricSnapshot) GetCounts() []uint64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

// LogEntry is a log entry. Every log entry consists of a message (the thing the
// user logged) and a set of metadata describing the message.
type LogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App        string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`                                   // application name (e.g., todo)
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                           // deployment id (e.g., uuid.New().String())
	Component  string `protobuf:"bytes,3,opt,name=component,proto3" json:"component,omitempty"`                       // component  (e.g., Todo, stdout, stderr, global)
	Node       string `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty"`                                 // weavelet id (e.g., uuid.New().String())
	TimeMicros int64  `protobuf:"fixed64,5,opt,name=time_micros,json=timeMicros,proto3" json:"time_micros,omitempty"` // time when logged (microseconds since epoch)
	Level      string `protobuf:"bytes,6,opt,name=level,proto3" json:"level,omitempty"`                               // log level (e.g., debug, info, warn, error, fatal)
	File       string `protobuf:"bytes,7,opt,name=file,proto3" json:"file,omitempty"`                                 // source file (e.g., // /tmp/serviceweaver/server.go)
	Line       int32  `protobuf:"varint,8,opt,name=line,proto3" json:"line,omitempty"`                                // source line // (e.g., 80)
	Msg        string `protobuf:"bytes,9,opt,name=msg,proto3" json:"msg,omitempty"`                                   // user provided msg (e.g., "Hello!")
	// User-provided attributes and their associated values. The storage format
	// is a name followed by its value, i.e.:
	//
	//	name1, value1, name2, value2, name3, value3, ...
	Attrs []string `protobuf:"bytes,10,rep,name=attrs,proto3" json:"attrs,omitempty"`
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{26}
}

func (x *LogEntry) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *LogEntry) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LogEntry) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *LogEntry) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *LogEntry) GetTimeMicros() int64 {
	if x != nil {
		return x.TimeMicros
	}
	return 0
}

func (x *LogEntry) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *LogEntry) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *LogEntry) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *LogEntry) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LogEntry) GetAttrs() []string {
	if x != nil {
		return x.Attrs
	}
	return nil
}

// Span is a proto-based representation of an open-telemetry Span.
type Span struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                       // Span name
	TraceId      []byte         `protobuf:"bytes,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`                  // Span trace id
	SpanId       []byte         `protobuf:"bytes,3,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`                     // Unique span id
	ParentSpanId []byte         `protobuf:"bytes,4,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"` // If non-empty, the span's parent id
	Kind         SpanKind       `protobuf:"varint,5,opt,name=kind,proto3,enum=runtime.SpanKind" json:"kind,omitempty"`                // Span's role in the trace.
	StartMicros  int64          `protobuf:"fixed64,6,opt,name=start_micros,json=startMicros,proto3" json:"start_micros,omitempty"`    // Span start time (microseconds since epoch)
	EndMicros    int64          `protobuf:"fixed64,7,opt,name=end_micros,json=endMicros,proto3" json:"end_micros,omitempty"`          // Span end time (microseconds since epoch)
	Attributes   []*Attribute   `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty"`                           // Span attributes
	Links        []*Span_Link   `protobuf:"bytes,9,rep,name=links,proto3" json:"links,omitempty"`                                     // Links to other spans
	Events       []*Span_Event  `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"`                                  // Events that occured in the span's lifetime
	Status       *Span_Status   `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`                                  // Span status
	Library      *Span_Library  `protobuf:"bytes,12,opt,name=library,proto3" json:"library,omitempty"`                                // Instrumentation library that created the span
	Resource     *Span_Resource `protobuf:"bytes,13,opt,name=resource,proto3" json:"resource,omitempty"`
	// Number of span attributes dropped due to limits being reached.
	DroppedAttributeCount int64 `protobuf:"varint,14,opt,name=dropped_attribute_count,json=droppedAttributeCount,proto3" json:"dropped_attribute_count,omitempty"`
	// Number of links dropped due to limits being reached.
	DroppedLinkCount int64 `protobuf:"varint,15,opt,name=dropped_link_count,json=droppedLinkCount,proto3" json:"dropped_link_count,omitempty"`
	// Number of events dropped due to limits being reached.
	DroppedEventCount int64 `protobuf:"varint,16,opt,name=dropped_event_count,json=droppedEventCount,proto3" json:"dropped_event_count,omitempty"`
	// Number of spans that consider this span a direct parent.
	ChildSpanCount int64 `protobuf:"varint,17,opt,name=child_span_count,json=childSpanCount,proto3" json:"child_span_count,omitempty"`
}

func (x *Span) Reset() {
	*x = Span{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{27}
}

func (x *Span) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Span) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *Span) GetSpanId() []byte {
	if x != nil {
		return x.SpanId
	}
	return nil
}

func (x *Span) GetParentSpanId() []byte {
	if x != nil {
		return x.ParentSpanId
	}
	return nil
}

func (x *Span) GetKind() SpanKind {
	if x != nil {
		return x.Kind
	}
	return SpanKind_UNSPECIFIED
}

func (x *Span) GetStartMicros() int64 {
	if x != nil {
		return x.StartMicros
	}
	return 0
}

func (x *Span) GetEndMicros() int64 {
	if x != nil {
		return x.EndMicros
	}
	return 0
}

func (x *Span) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Span) GetLinks() []*Span_Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Span) GetEvents() []*Span_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Span) GetStatus() *Span_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Span) GetLibrary() *Span_Library {
	if x != nil {
		return x.Library
	}
	return nil
}

func (x *Span) GetResource() *Span_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Span) GetDroppedAttributeCount() int64 {
	if x != nil {
		return x.DroppedAttributeCount
	}
	return 0
}

func (x *Span) GetDroppedLinkCount() int64 {
	if x != nil {
		return x.DroppedLinkCount
	}
	return 0
}

func (x *Span) GetDroppedEventCount() int64 {
	if x != nil {
		return x.DroppedEventCount
	}
	return 0
}

func (x *Span) GetChildSpanCount() int64 {
	if x != nil {
		return x.ChildSpanCount
	}
	return 0
}

// Spans is a list of Span messages.
type Spans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Span []*Span `protobuf:"bytes,1,rep,name=span,proto3" json:"span,omitempty"`
}

func (x *Spans) Reset() {
	*x = Spans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spans) ProtoMessage() {}

func (x *Spans) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spans.ProtoReflect.Descriptor instead.
func (*Spans) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{28}
}

func (x *Spans) GetSpan() []*Span {
	if x != nil {
		return x.Span
	}
	return nil
}

// Attribute is a key-value pair representing a component property.
//
// TODO(mwhittaker): Nest in Span. Attribute is too generic.
type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *Attribute_Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{29}
}

func (x *Attribute) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Attribute) GetValue() *Attribute_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Represents a slice and the replicas to which it is assigned.
type Assignment_Slice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inclusive start key. Strictly greater than the `start` value for the
	// previous entry in the current assignment.
	//
	// The first slice should always set start to 0.
	Start uint64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// Replicas assigned to host this slice. The implementation will set
	// these values to strings of the form "<net>://<addr>". E.g.,
	//
	//	tcp://host:1234
	//	unix:///tmp/unix.sock
	Replicas []string `protobuf:"bytes,2,rep,name=replicas,proto3" json:"replicas,omitempty"`
}

func (x *Assignment_Slice) Reset() {
	*x = Assignment_Slice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assignment_Slice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment_Slice) ProtoMessage() {}

func (x *Assignment_Slice) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment_Slice.ProtoReflect.Descriptor instead.
func (*Assignment_Slice) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{20, 0}
}

func (x *Assignment_Slice) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Assignment_Slice) GetReplicas() []string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

// ComponentLoad includes load information for a component. The component's
// key space is divided into a number of slices, each of which is associated
// with a particular double-valued load.
//
// TODO(mwhittaker): In the short term, a weavelet will report one SliceLoad
// for every slice it is assigned. In the future, however, we may report load
// in more advanced ways.
type WeaveletLoadReport_ComponentLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(mwhittaker): In full generality, load is a generic
	// application-specific double-valued measurement (e.g., total number of
	// requests, size of components in memory). For now to simplify things, we
	// assume load is measured as requests per second.
	Load []*WeaveletLoadReport_ComponentLoad_SliceLoad `protobuf:"bytes,1,rep,name=load,proto3" json:"load,omitempty"` // load, by slice
	// TODO(mwhittaker): For now, load is reported with respect to a given
	// assignment. When the assignment changes, the load is reset. This approach
	// works for rate-based load like requests per second, but not other
	// non-rate based load like size of cached components.
	Version uint64 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *WeaveletLoadReport_ComponentLoad) Reset() {
	*x = WeaveletLoadReport_ComponentLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaveletLoadReport_ComponentLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaveletLoadReport_ComponentLoad) ProtoMessage() {}

func (x *WeaveletLoadReport_ComponentLoad) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaveletLoadReport_ComponentLoad.ProtoReflect.Descriptor instead.
func (*WeaveletLoadReport_ComponentLoad) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{21, 0}
}

func (x *WeaveletLoadReport_ComponentLoad) GetLoad() []*WeaveletLoadReport_ComponentLoad_SliceLoad {
	if x != nil {
		return x.Load
	}
	return nil
}

func (x *WeaveletLoadReport_ComponentLoad) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// SliceLoad includes the load of a slice, [start, end).
type WeaveletLoadReport_ComponentLoad_SliceLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start  uint64                                                     `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"` // inclusive
	End    uint64                                                     `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`     // exclusive
	Load   float64                                                    `protobuf:"fixed64,3,opt,name=load,proto3" json:"load,omitempty"`
	Splits []*WeaveletLoadReport_ComponentLoad_SliceLoad_SubsliceLoad `protobuf:"bytes,4,rep,name=splits,proto3" json:"splits,omitempty"`
	// The "size" of the slice. Given a slice [a, b), it's tempting to think
	// the slice has size b - a. This has a couple of problems.
	//
	//  1. Even if a slice is large, only a few keys in the slice may be
	//     used. For example, a weavelet with slice [0, 2^60) may only
	//     receive requests for keys in the range [0, 100).
	//  2. a and b are not necessarily numeric. Imagine we are performing
	//     range sharding on strings and have the slice ["ccbae",
	//     "hhaefi"). What is the size of this slice?
	//
	// We instead measure the "size" of a slice as an estimate of the number
	// of keys accessed in the slice. For example, if a slice [0, 1000)
	// receives requests for keys 0, 1, 2, 3, and 10, then the size of the
	// slice is 5.
	//
	// TODO(mwhittaker): Implement this. For now, we do report the size of a
	// slice [a, b) as b - a.
	Size uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *WeaveletLoadReport_ComponentLoad_SliceLoad) Reset() {
	*x = WeaveletLoadReport_ComponentLoad_SliceLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaveletLoadReport_ComponentLoad_SliceLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaveletLoadReport_ComponentLoad_SliceLoad) ProtoMessage() {}

func (x *WeaveletLoadReport_ComponentLoad_SliceLoad) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaveletLoadReport_ComponentLoad_SliceLoad.ProtoReflect.Descriptor instead.
func (*WeaveletLoadReport_ComponentLoad_SliceLoad) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{21, 0, 0}
}

func (x *WeaveletLoadReport_ComponentLoad_SliceLoad) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *WeaveletLoadReport_ComponentLoad_SliceLoad) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *WeaveletLoadReport_ComponentLoad_SliceLoad) GetLoad() float64 {
	if x != nil {
		return x.Load
	}
	return 0
}

func (x *WeaveletLoadReport_ComponentLoad_SliceLoad) GetSplits() []*WeaveletLoadReport_ComponentLoad_SliceLoad_SubsliceLoad {
	if x != nil {
		return x.Splits
	}
	return nil
}

func (x *WeaveletLoadReport_ComponentLoad_SliceLoad) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// splits divides the load of this slice into smaller subslices. For
// example, given a slice [0, 100) and load 9.0, we may have the
// following subslices:
//
//	SubsliceLoad{Start:  0, Load: 3.0} // [0, 20)
//	SubsliceLoad{Start: 20, Load: 3.0} // [20, 80)
//	SubsliceLoad{Start: 80, Load: 3.0} // [80, 100)
//
// TODO(mwhittaker): Implement this. For now, splits is left empty.
//
// TODO(mwhittaker): In the future, we likely want to report hot keys as
// their own slice. Change SubsliceLoad to support that.
type WeaveletLoadReport_ComponentLoad_SliceLoad_SubsliceLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start uint64  `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Load  float64 `protobuf:"fixed64,2,opt,name=load,proto3" json:"load,omitempty"`
}

func (x *WeaveletLoadReport_ComponentLoad_SliceLoad_SubsliceLoad) Reset() {
	*x = WeaveletLoadReport_ComponentLoad_SliceLoad_SubsliceLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaveletLoadReport_ComponentLoad_SliceLoad_SubsliceLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaveletLoadReport_ComponentLoad_SliceLoad_SubsliceLoad) ProtoMessage() {}

func (x *WeaveletLoadReport_ComponentLoad_SliceLoad_SubsliceLoad) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaveletLoadReport_ComponentLoad_SliceLoad_SubsliceLoad.ProtoReflect.Descriptor instead.
func (*WeaveletLoadReport_ComponentLoad_SliceLoad_SubsliceLoad) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{21, 0, 0, 0}
}

func (x *WeaveletLoadReport_ComponentLoad_SliceLoad_SubsliceLoad) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *WeaveletLoadReport_ComponentLoad_SliceLoad_SubsliceLoad) GetLoad() float64 {
	if x != nil {
		return x.Load
	}
	return 0
}

// Link represents the link a span has to another span.
type Span_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId    []byte       `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"` // Span trace id
	SpanId     []byte       `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`    // Unique span id
	Attributes []*Attribute `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`          // Span attributes
	// Number of span attributes dropped due to limits being reached
	DroppedAttributeCount int64 `protobuf:"varint,4,opt,name=dropped_attribute_count,json=droppedAttributeCount,proto3" json:"dropped_attribute_count,omitempty"`
}

func (x *Span_Link) Reset() {
	*x = Span_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Link) ProtoMessage() {}

func (x *Span_Link) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Link.ProtoReflect.Descriptor instead.
func (*Span_Link) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{27, 0}
}

func (x *Span_Link) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *Span_Link) GetSpanId() []byte {
	if x != nil {
		return x.SpanId
	}
	return nil
}

func (x *Span_Link) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Span_Link) GetDroppedAttributeCount() int64 {
	if x != nil {
		return x.DroppedAttributeCount
	}
	return 0
}

// Event represent an event that occurred in the span's lifetime.
type Span_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                 // Even name
	TimeMicros int64        `protobuf:"fixed64,2,opt,name=time_micros,json=timeMicros,proto3" json:"time_micros,omitempty"` // Time event was recorded (micros since epoch)
	Attributes []*Attribute `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`                     // Event attributes
	// Number of attributes dropped due to limits being reached.
	DroppedAttributeCount int64 `protobuf:"varint,4,opt,name=dropped_attribute_count,json=droppedAttributeCount,proto3" json:"dropped_attribute_count,omitempty"`
}

func (x *Span_Event) Reset() {
	*x = Span_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Event) ProtoMessage() {}

func (x *Span_Event) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Event.ProtoReflect.Descriptor instead.
func (*Span_Event) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{27, 1}
}

func (x *Span_Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Span_Event) GetTimeMicros() int64 {
	if x != nil {
		return x.TimeMicros
	}
	return 0
}

func (x *Span_Event) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Span_Event) GetDroppedAttributeCount() int64 {
	if x != nil {
		return x.DroppedAttributeCount
	}
	return 0
}

// Status represents the status for a span.
type Span_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  Span_Status_Code `protobuf:"varint,1,opt,name=code,proto3,enum=runtime.Span_Status_Code" json:"code,omitempty"` // Span status code
	Error string           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`                              // Error text; set only for an ERROR code
}

func (x *Span_Status) Reset() {
	*x = Span_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Status) ProtoMessage() {}

func (x *Span_Status) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Status.ProtoReflect.Descriptor instead.
func (*Span_Status) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{27, 2}
}

func (x *Span_Status) GetCode() Span_Status_Code {
	if x != nil {
		return x.Code
	}
	return Span_Status_UNSET
}

func (x *Span_Status) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Library stores information about the instrumentation library that
// created the span.
type Span_Library struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the instrumentation library, typically the package name of
	// the library.
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version   string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                      // The version of the instrumentation library
	SchemaUrl string `protobuf:"bytes,3,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"` // Schema url of the telemetry emitted by library
}

func (x *Span_Library) Reset() {
	*x = Span_Library{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Library) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Library) ProtoMessage() {}

func (x *Span_Library) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Library.ProtoReflect.Descriptor instead.
func (*Span_Library) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{27, 3}
}

func (x *Span_Library) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Span_Library) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Span_Library) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

// Resource describes an entity (e.g., a Service Weaver component) this span
// belongs to.
type Span_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL that describes the shape and a composition of data for this span.
	SchemaUrl  string       `protobuf:"bytes,1,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"` // Resource attributes
}

func (x *Span_Resource) Reset() {
	*x = Span_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Resource) ProtoMessage() {}

func (x *Span_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Resource.ProtoReflect.Descriptor instead.
func (*Span_Resource) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{27, 4}
}

func (x *Span_Resource) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

func (x *Span_Resource) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type Attribute_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Attribute_Value_Type `protobuf:"varint,1,opt,name=type,proto3,enum=runtime.Attribute_Value_Type" json:"type,omitempty"` // Attribute type
	// Types that are assignable to Value:
	//
	//	*Attribute_Value_Num
	//	*Attribute_Value_Str
	//	*Attribute_Value_Nums
	//	*Attribute_Value_Strs
	Value isAttribute_Value_Value `protobuf_oneof:"value"`
}

func (x *Attribute_Value) Reset() {
	*x = Attribute_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute_Value) ProtoMessage() {}

func (x *Attribute_Value) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute_Value.ProtoReflect.Descriptor instead.
func (*Attribute_Value) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{29, 0}
}

func (x *Attribute_Value) GetType() Attribute_Value_Type {
	if x != nil {
		return x.Type
	}
	return Attribute_Value_INVALID
}

func (m *Attribute_Value) GetValue() isAttribute_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Attribute_Value) GetNum() uint64 {
	if x, ok := x.GetValue().(*Attribute_Value_Num); ok {
		return x.Num
	}
	return 0
}

func (x *Attribute_Value) GetStr() string {
	if x, ok := x.GetValue().(*Attribute_Value_Str); ok {
		return x.Str
	}
	return ""
}

func (x *Attribute_Value) GetNums() *Attribute_Value_NumberList {
	if x, ok := x.GetValue().(*Attribute_Value_Nums); ok {
		return x.Nums
	}
	return nil
}

func (x *Attribute_Value) GetStrs() *Attribute_Value_StringList {
	if x, ok := x.GetValue().(*Attribute_Value_Strs); ok {
		return x.Strs
	}
	return nil
}

type isAttribute_Value_Value interface {
	isAttribute_Value_Value()
}

type Attribute_Value_Num struct {
	Num uint64 `protobuf:"varint,2,opt,name=num,proto3,oneof"`
}

type Attribute_Value_Str struct {
	Str string `protobuf:"bytes,3,opt,name=str,proto3,oneof"`
}

type Attribute_Value_Nums struct {
	Nums *Attribute_Value_NumberList `protobuf:"bytes,4,opt,name=nums,proto3,oneof"`
}

type Attribute_Value_Strs struct {
	Strs *Attribute_Value_StringList `protobuf:"bytes,5,opt,name=strs,proto3,oneof"`
}

func (*Attribute_Value_Num) isAttribute_Value_Value() {}

func (*Attribute_Value_Str) isAttribute_Value_Value() {}

func (*Attribute_Value_Nums) isAttribute_Value_Value() {}

func (*Attribute_Value_Strs) isAttribute_Value_Value() {}

type Attribute_Value_NumberList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nums []uint64 `protobuf:"varint,1,rep,packed,name=nums,proto3" json:"nums,omitempty"`
}

func (x *Attribute_Value_NumberList) Reset() {
	*x = Attribute_Value_NumberList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute_Value_NumberList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute_Value_NumberList) ProtoMessage() {}

func (x *Attribute_Value_NumberList) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute_Value_NumberList.ProtoReflect.Descriptor instead.
func (*Attribute_Value_NumberList) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{29, 0, 0}
}

func (x *Attribute_Value_NumberList) GetNums() []uint64 {
	if x != nil {
		return x.Nums
	}
	return nil
}

type Attribute_Value_StringList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strs []string `protobuf:"bytes,2,rep,name=strs,proto3" json:"strs,omitempty"`
}

func (x *Attribute_Value_StringList) Reset() {
	*x = Attribute_Value_StringList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute_Value_StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute_Value_StringList) ProtoMessage() {}

func (x *Attribute_Value_StringList) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute_Value_StringList.ProtoReflect.Descriptor instead.
func (*Attribute_Value_StringList) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{29, 0, 1}
}

func (x *Attribute_Value_StringList) GetStrs() []string {
	if x != nil {
		return x.Strs
	}
	return nil
}

var File_runtime_protos_runtime_proto protoreflect.FileDescriptor

var file_runtime_protos_runtime_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xcf, 0x04, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a,
	0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x52, 0x75, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x72, 0x75,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x13, 0x77, 0x65,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x57, 0x65, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x11, 0x77, 0x65, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4a, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x0f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x50, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x13,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x94, 0x05, 0x0a, 0x0b, 0x57, 0x65,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x77, 0x65,
	0x61, 0x76, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x77, 0x65, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x13,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x15, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x69, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x03, 0x61, 0x70, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x30, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb9, 0x02,
	0x0a, 0x09, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x3a, 0x0a,
	0x0c, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x73, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x3c,
	0x0a, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3b, 0x0a, 0x0d,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x25, 0x0a, 0x0f, 0x43, 0x6f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xb2, 0x03, 0x0a, 0x11, 0x57, 0x65, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x57, 0x65, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x0c, 0x57, 0x65, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x70, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x33, 0x0a,
	0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x70, 0x75, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x70, 0x75, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x73, 0x22, 0x6f, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x3d, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x22, 0x33,
	0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x2b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6b,
	0x0a, 0x15, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x50, 0x0a, 0x13, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x32, 0x0a,
	0x08, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x22, 0x3c, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x2f,
	0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x22,
	0xe9, 0x01, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x70, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x39, 0x0a, 0x05, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x85, 0x05, 0x0a, 0x12,
	0x57, 0x65, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x70, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x1a, 0xe4, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x47, 0x0a, 0x04, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x57, 0x65, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x61, 0x64, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xef, 0x01, 0x0a,
	0x09, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x57, 0x65, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61,
	0x64, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x1a, 0x38, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x63,
	0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x44, 0x65, 0x66, 0x52, 0x04, 0x64, 0x65, 0x66, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x09, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x74,
	0x79, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74,
	0x79, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x12, 0x36, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x66, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4b, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xad,
	0x02, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x74, 0x79, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x79, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x65, 0x6c, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x70,
	0x12, 0x3b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xef,
	0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74,
	0x74, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73,
	0x22, 0xbb, 0x0a, 0x0a, 0x04, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x10, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x10, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x12, 0x32, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70,
	0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2b,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x70, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xa6,
	0x01, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xa8, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x73, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x24, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x02, 0x1a, 0x56, 0x0a, 0x07, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x1a,
	0x5d, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x2a,
	0x0a, 0x05, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x22, 0xf6, 0x03, 0x0a, 0x09, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa6, 0x03, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x03, 0x73,
	0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12,
	0x39, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x74,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x73, 0x74, 0x72, 0x73, 0x1a, 0x20, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x73, 0x1a, 0x20, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x72, 0x73, 0x22, 0x7f, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36,
	0x34, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x42, 0x4f, 0x4f, 0x4c, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e,
	0x54, 0x36, 0x34, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4c, 0x4f,
	0x41, 0x54, 0x36, 0x34, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x08, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2a, 0x31, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x43, 0x50, 0x55, 0x10, 0x02, 0x2a, 0x47, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0x40, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x41, 0x55, 0x47, 0x45,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10,
	0x03, 0x2a, 0x5d, 0x0a, 0x08, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x10, 0x05,
	0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x61, 0x76, 0x65, 0x72, 0x2f, 0x77, 0x65, 0x61,
	0x76, 0x65, 0x72, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_runtime_protos_runtime_proto_rawDescOnce sync.Once
	file_runtime_protos_runtime_proto_rawDescData = file_runtime_protos_runtime_proto_rawDesc
)

func file_runtime_protos_runtime_proto_rawDescGZIP() []byte {
	file_runtime_protos_runtime_proto_rawDescOnce.Do(func() {
		file_runtime_protos_runtime_proto_rawDescData = protoimpl.X.CompressGZIP(file_runtime_protos_runtime_proto_rawDescData)
	})
	return file_runtime_protos_runtime_proto_rawDescData
}

var file_runtime_protos_runtime_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_runtime_protos_runtime_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_runtime_protos_runtime_proto_goTypes = []interface{}{
	(ProfileType)(0),                         // 0: runtime.ProfileType
	(HealthStatus)(0),                        // 1: runtime.HealthStatus
	(MetricType)(0),                          // 2: runtime.MetricType
	(SpanKind)(0),                            // 3: runtime.SpanKind
	(Span_Status_Code)(0),                    // 4: runtime.Span.Status.Code
	(Attribute_Value_Type)(0),                // 5: runtime.Attribute.Value.Type
	(*EnvelopeMsg)(nil),                      // 6: runtime.EnvelopeMsg
	(*WeaveletMsg)(nil),                      // 7: runtime.WeaveletMsg
	(*Deployment)(nil),                       // 8: runtime.Deployment
	(*ComponentGroup)(nil),                   // 9: runtime.ComponentGroup
	(*AppConfig)(nil),                        // 10: runtime.AppConfig
	(*ColocationGroup)(nil),                  // 11: runtime.ColocationGroup
	(*WeaveletSetupInfo)(nil),                // 12: runtime.WeaveletSetupInfo
	(*WeaveletInfo)(nil),                     // 13: runtime.WeaveletInfo
	(*RoutingInfo)(nil),                      // 14: runtime.RoutingInfo
	(*RunProfiling)(nil),                     // 15: runtime.RunProfiling
	(*Profile)(nil),                          // 16: runtime.Profile
	(*HealthReport)(nil),                     // 17: runtime.HealthReport
	(*ComponentToStart)(nil),                 // 18: runtime.ComponentToStart
	(*ComponentsToStart)(nil),                // 19: runtime.ComponentsToStart
	(*GetAddressRequest)(nil),                // 20: runtime.GetAddressRequest
	(*GetAddressReply)(nil),                  // 21: runtime.GetAddressReply
	(*ExportListenerRequest)(nil),            // 22: runtime.ExportListenerRequest
	(*ExportListenerReply)(nil),              // 23: runtime.ExportListenerReply
	(*Listener)(nil),                         // 24: runtime.Listener
	(*Listeners)(nil),                        // 25: runtime.Listeners
	(*Assignment)(nil),                       // 26: runtime.Assignment
	(*WeaveletLoadReport)(nil),               // 27: runtime.WeaveletLoadReport
	(*MetricUpdate)(nil),                     // 28: runtime.MetricUpdate
	(*MetricDef)(nil),                        // 29: runtime.MetricDef
	(*MetricValue)(nil),                      // 30: runtime.MetricValue
	(*MetricSnapshot)(nil),                   // 31: runtime.MetricSnapshot
	(*LogEntry)(nil),                         // 32: runtime.LogEntry
	(*Span)(nil),                             // 33: runtime.Span
	(*Spans)(nil),                            // 34: runtime.Spans
	(*Attribute)(nil),                        // 35: runtime.Attribute
	nil,                                      // 36: runtime.AppConfig.SectionsEntry
	nil,                                      // 37: runtime.WeaveletSetupInfo.SectionsEntry
	(*Assignment_Slice)(nil),                 // 38: runtime.Assignment.Slice
	(*WeaveletLoadReport_ComponentLoad)(nil), // 39: runtime.WeaveletLoadReport.ComponentLoad
	nil,                                      // 40: runtime.WeaveletLoadReport.LoadsEntry
	(*WeaveletLoadReport_ComponentLoad_SliceLoad)(nil),              // 41: runtime.WeaveletLoadReport.ComponentLoad.SliceLoad
	(*WeaveletLoadReport_ComponentLoad_SliceLoad_SubsliceLoad)(nil), // 42: runtime.WeaveletLoadReport.ComponentLoad.SliceLoad.SubsliceLoad
	nil,                                // 43: runtime.MetricDef.LabelsEntry
	nil,                                // 44: runtime.MetricSnapshot.LabelsEntry
	(*Span_Link)(nil),                  // 45: runtime.Span.Link
	(*Span_Event)(nil),                 // 46: runtime.Span.Event
	(*Span_Status)(nil),                // 47: runtime.Span.Status
	(*Span_Library)(nil),               // 48: runtime.Span.Library
	(*Span_Resource)(nil),              // 49: runtime.Span.Resource
	(*Attribute_Value)(nil),            // 50: runtime.Attribute.Value
	(*Attribute_Value_NumberList)(nil), // 51: runtime.Attribute.Value.NumberList
	(*Attribute_Value_StringList)(nil), // 52: runtime.Attribute.Value.StringList
}
var file_runtime_protos_runtime_proto_depIdxs = []int32{
	15, // 0: runtime.EnvelopeMsg.run_profiling:type_name -> runtime.RunProfiling
	12, // 1: runtime.EnvelopeMsg.weavelet_setup_info:type_name -> runtime.WeaveletSetupInfo
	14, // 2: runtime.EnvelopeMsg.routing_info:type_name -> runtime.RoutingInfo
	19, // 3: runtime.EnvelopeMsg.components_to_start:type_name -> runtime.ComponentsToStart
	21, // 4: runtime.EnvelopeMsg.get_address_reply:type_name -> runtime.GetAddressReply
	23, // 5: runtime.EnvelopeMsg.export_listener_reply:type_name -> runtime.ExportListenerReply
	28, // 6: runtime.WeaveletMsg.metrics:type_name -> runtime.MetricUpdate
	32, // 7: runtime.WeaveletMsg.log_entry:type_name -> runtime.LogEntry
	34, // 8: runtime.WeaveletMsg.trace_spans:type_name -> runtime.Spans
	18, // 9: runtime.WeaveletMsg.component_to_start:type_name -> runtime.ComponentToStart
	27, // 10: runtime.WeaveletMsg.load_report:type_name -> runtime.WeaveletLoadReport
	17, // 11: runtime.WeaveletMsg.health_report:type_name -> runtime.HealthReport
	16, // 12: runtime.WeaveletMsg.profile:type_name -> runtime.Profile
	13, // 13: runtime.WeaveletMsg.weavelet_info:type_name -> runtime.WeaveletInfo
	20, // 14: runtime.WeaveletMsg.get_address_request:type_name -> runtime.GetAddressRequest
	22, // 15: runtime.WeaveletMsg.export_listener_request:type_name -> runtime.ExportListenerRequest
	10, // 16: runtime.Deployment.app:type_name -> runtime.AppConfig
	9,  // 17: runtime.AppConfig.same_process:type_name -> runtime.ComponentGroup
	36, // 18: runtime.AppConfig.sections:type_name -> runtime.AppConfig.SectionsEntry
	11, // 19: runtime.WeaveletSetupInfo.group:type_name -> runtime.ColocationGroup
	9,  // 20: runtime.WeaveletSetupInfo.same_process:type_name -> runtime.ComponentGroup
	37, // 21: runtime.WeaveletSetupInfo.sections:type_name -> runtime.WeaveletSetupInfo.SectionsEntry
	26, // 22: runtime.RoutingInfo.assignment:type_name -> runtime.Assignment
	0,  // 23: runtime.RunProfiling.profile_type:type_name -> runtime.ProfileType
	1,  // 24: runtime.HealthReport.status:type_name -> runtime.HealthStatus
	24, // 25: runtime.ExportListenerRequest.listener:type_name -> runtime.Listener
	24, // 26: runtime.Listeners.listeners:type_name -> runtime.Listener
	38, // 27: runtime.Assignment.slices:type_name -> runtime.Assignment.Slice
	40, // 28: runtime.WeaveletLoadReport.loads:type_name -> runtime.WeaveletLoadReport.LoadsEntry
	29, // 29: runtime.MetricUpdate.defs:type_name -> runtime.MetricDef
	30, // 30: runtime.MetricUpdate.values:type_name -> runtime.MetricValue
	2,  // 31: runtime.MetricDef.typ:type_name -> runtime.MetricType
	43, // 32: runtime.MetricDef.labels:type_name -> runtime.MetricDef.LabelsEntry
	2,  // 33: runtime.MetricSnapshot.typ:type_name -> runtime.MetricType
	44, // 34: runtime.MetricSnapshot.labels:type_name -> runtime.MetricSnapshot.LabelsEntry
	3,  // 35: runtime.Span.kind:type_name -> runtime.SpanKind
	35, // 36: runtime.Span.attributes:type_name -> runtime.Attribute
	45, // 37: runtime.Span.links:type_name -> runtime.Span.Link
	46, // 38: runtime.Span.events:type_name -> runtime.Span.Event
	47, // 39: runtime.Span.status:type_name -> runtime.Span.Status
	48, // 40: runtime.Span.library:type_name -> runtime.Span.Library
	49, // 41: runtime.Span.resource:type_name -> runtime.Span.Resource
	33, // 42: runtime.Spans.span:type_name -> runtime.Span
	50, // 43: runtime.Attribute.value:type_name -> runtime.Attribute.Value
	41, // 44: runtime.WeaveletLoadReport.ComponentLoad.load:type_name -> runtime.WeaveletLoadReport.ComponentLoad.SliceLoad
	39, // 45: runtime.WeaveletLoadReport.LoadsEntry.value:type_name -> runtime.WeaveletLoadReport.ComponentLoad
	42, // 46: runtime.WeaveletLoadReport.ComponentLoad.SliceLoad.splits:type_name -> runtime.WeaveletLoadReport.ComponentLoad.SliceLoad.SubsliceLoad
	35, // 47: runtime.Span.Link.attributes:type_name -> runtime.Attribute
	35, // 48: runtime.Span.Event.attributes:type_name -> runtime.Attribute
	4,  // 49: runtime.Span.Status.code:type_name -> runtime.Span.Status.Code
	35, // 50: runtime.Span.Resource.attributes:type_name -> runtime.Attribute
	5,  // 51: runtime.Attribute.Value.type:type_name -> runtime.Attribute.Value.Type
	51, // 52: runtime.Attribute.Value.nums:type_name -> runtime.Attribute.Value.NumberList
	52, // 53: runtime.Attribute.Value.strs:type_name -> runtime.Attribute.Value.StringList
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_runtime_protos_runtime_proto_init() }
func file_runtime_protos_runtime_proto_init() {
	if File_runtime_protos_runtime_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_runtime_protos_runtime_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvelopeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaveletMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColocationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaveletSetupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaveletInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunProfiling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentToStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentsToStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportListenerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportListenerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listeners); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaveletLoadReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assignment_Slice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaveletLoadReport_ComponentLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaveletLoadReport_ComponentLoad_SliceLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaveletLoadReport_ComponentLoad_SliceLoad_SubsliceLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Library); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute_Value_NumberList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute_Value_StringList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_runtime_protos_runtime_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*Attribute_Value_Num)(nil),
		(*Attribute_Value_Str)(nil),
		(*Attribute_Value_Nums)(nil),
		(*Attribute_Value_Strs)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_runtime_protos_runtime_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_runtime_protos_runtime_proto_goTypes,
		DependencyIndexes: file_runtime_protos_runtime_proto_depIdxs,
		EnumInfos:         file_runtime_protos_runtime_proto_enumTypes,
		MessageInfos:      file_runtime_protos_runtime_proto_msgTypes,
	}.Build()
	File_runtime_protos_runtime_proto = out.File
	file_runtime_protos_runtime_proto_rawDesc = nil
	file_runtime_protos_runtime_proto_goTypes = nil
	file_runtime_protos_runtime_proto_depIdxs = nil
}
