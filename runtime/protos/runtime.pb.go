// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: runtime/protos/runtime.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HealthStatus specifies the health of a weavelet.
type HealthStatus int32

const (
	HealthStatus_UNKNOWN    HealthStatus = 0
	HealthStatus_HEALTHY    HealthStatus = 1
	HealthStatus_UNHEALTHY  HealthStatus = 2
	HealthStatus_TERMINATED HealthStatus = 3
)

// Enum value maps for HealthStatus.
var (
	HealthStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "HEALTHY",
		2: "UNHEALTHY",
		3: "TERMINATED",
	}
	HealthStatus_value = map[string]int32{
		"UNKNOWN":    0,
		"HEALTHY":    1,
		"UNHEALTHY":  2,
		"TERMINATED": 3,
	}
)

func (x HealthStatus) Enum() *HealthStatus {
	p := new(HealthStatus)
	*p = x
	return p
}

func (x HealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_runtime_protos_runtime_proto_enumTypes[0].Descriptor()
}

func (HealthStatus) Type() protoreflect.EnumType {
	return &file_runtime_protos_runtime_proto_enumTypes[0]
}

func (x HealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthStatus.Descriptor instead.
func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{0}
}

// MetricType specifies a particular kind of metric.
type MetricType int32

const (
	MetricType_INVALID   MetricType = 0
	MetricType_COUNTER   MetricType = 1
	MetricType_GAUGE     MetricType = 2
	MetricType_HISTOGRAM MetricType = 3
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "INVALID",
		1: "COUNTER",
		2: "GAUGE",
		3: "HISTOGRAM",
	}
	MetricType_value = map[string]int32{
		"INVALID":   0,
		"COUNTER":   1,
		"GAUGE":     2,
		"HISTOGRAM": 3,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_runtime_protos_runtime_proto_enumTypes[1].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_runtime_protos_runtime_proto_enumTypes[1]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{1}
}

// ProfileType specifies a type of profile.
type ProfileType int32

const (
	ProfileType_Unspecified ProfileType = 0
	ProfileType_Heap        ProfileType = 1
	ProfileType_CPU         ProfileType = 2
)

// Enum value maps for ProfileType.
var (
	ProfileType_name = map[int32]string{
		0: "Unspecified",
		1: "Heap",
		2: "CPU",
	}
	ProfileType_value = map[string]int32{
		"Unspecified": 0,
		"Heap":        1,
		"CPU":         2,
	}
)

func (x ProfileType) Enum() *ProfileType {
	p := new(ProfileType)
	*p = x
	return p
}

func (x ProfileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileType) Descriptor() protoreflect.EnumDescriptor {
	return file_runtime_protos_runtime_proto_enumTypes[2].Descriptor()
}

func (ProfileType) Type() protoreflect.EnumType {
	return &file_runtime_protos_runtime_proto_enumTypes[2]
}

func (x ProfileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileType.Descriptor instead.
func (ProfileType) EnumDescriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{2}
}

// Span's role in the trace.
type Span_Kind int32

const (
	Span_UNSPECIFIED Span_Kind = 0
	Span_INTERNAL    Span_Kind = 1
	Span_SERVER      Span_Kind = 2
	Span_CLIENT      Span_Kind = 3
	Span_PRODUCER    Span_Kind = 4
	Span_CONSUMER    Span_Kind = 5
)

// Enum value maps for Span_Kind.
var (
	Span_Kind_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "INTERNAL",
		2: "SERVER",
		3: "CLIENT",
		4: "PRODUCER",
		5: "CONSUMER",
	}
	Span_Kind_value = map[string]int32{
		"UNSPECIFIED": 0,
		"INTERNAL":    1,
		"SERVER":      2,
		"CLIENT":      3,
		"PRODUCER":    4,
		"CONSUMER":    5,
	}
)

func (x Span_Kind) Enum() *Span_Kind {
	p := new(Span_Kind)
	*p = x
	return p
}

func (x Span_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Span_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_runtime_protos_runtime_proto_enumTypes[3].Descriptor()
}

func (Span_Kind) Type() protoreflect.EnumType {
	return &file_runtime_protos_runtime_proto_enumTypes[3]
}

func (x Span_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Span_Kind.Descriptor instead.
func (Span_Kind) EnumDescriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{38, 0}
}

// Type describes the type of the value.
type Span_Attribute_Value_Type int32

const (
	Span_Attribute_Value_INVALID     Span_Attribute_Value_Type = 0 // Used when no value is set
	Span_Attribute_Value_BOOL        Span_Attribute_Value_Type = 1
	Span_Attribute_Value_INT64       Span_Attribute_Value_Type = 2
	Span_Attribute_Value_FLOAT64     Span_Attribute_Value_Type = 3
	Span_Attribute_Value_STRING      Span_Attribute_Value_Type = 4
	Span_Attribute_Value_BOOLLIST    Span_Attribute_Value_Type = 5
	Span_Attribute_Value_INT64LIST   Span_Attribute_Value_Type = 6
	Span_Attribute_Value_FLOAT64LIST Span_Attribute_Value_Type = 7
	Span_Attribute_Value_STRINGLIST  Span_Attribute_Value_Type = 8
)

// Enum value maps for Span_Attribute_Value_Type.
var (
	Span_Attribute_Value_Type_name = map[int32]string{
		0: "INVALID",
		1: "BOOL",
		2: "INT64",
		3: "FLOAT64",
		4: "STRING",
		5: "BOOLLIST",
		6: "INT64LIST",
		7: "FLOAT64LIST",
		8: "STRINGLIST",
	}
	Span_Attribute_Value_Type_value = map[string]int32{
		"INVALID":     0,
		"BOOL":        1,
		"INT64":       2,
		"FLOAT64":     3,
		"STRING":      4,
		"BOOLLIST":    5,
		"INT64LIST":   6,
		"FLOAT64LIST": 7,
		"STRINGLIST":  8,
	}
)

func (x Span_Attribute_Value_Type) Enum() *Span_Attribute_Value_Type {
	p := new(Span_Attribute_Value_Type)
	*p = x
	return p
}

func (x Span_Attribute_Value_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Span_Attribute_Value_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_runtime_protos_runtime_proto_enumTypes[4].Descriptor()
}

func (Span_Attribute_Value_Type) Type() protoreflect.EnumType {
	return &file_runtime_protos_runtime_proto_enumTypes[4]
}

func (x Span_Attribute_Value_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Span_Attribute_Value_Type.Descriptor instead.
func (Span_Attribute_Value_Type) EnumDescriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{38, 0, 0, 0}
}

type Span_Status_Code int32

const (
	Span_Status_UNSET Span_Status_Code = 0
	Span_Status_ERROR Span_Status_Code = 1
	Span_Status_OK    Span_Status_Code = 2
)

// Enum value maps for Span_Status_Code.
var (
	Span_Status_Code_name = map[int32]string{
		0: "UNSET",
		1: "ERROR",
		2: "OK",
	}
	Span_Status_Code_value = map[string]int32{
		"UNSET": 0,
		"ERROR": 1,
		"OK":    2,
	}
)

func (x Span_Status_Code) Enum() *Span_Status_Code {
	p := new(Span_Status_Code)
	*p = x
	return p
}

func (x Span_Status_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Span_Status_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_runtime_protos_runtime_proto_enumTypes[5].Descriptor()
}

func (Span_Status_Code) Type() protoreflect.EnumType {
	return &file_runtime_protos_runtime_proto_enumTypes[5]
}

func (x Span_Status_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Span_Status_Code.Descriptor instead.
func (Span_Status_Code) EnumDescriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{38, 3, 0}
}

// EnvelopeMsg is a message sent by an envelope to a weavelet.
type EnvelopeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique id for RPCs. An RPC request with positive id x expects a reply
	// with negative id -x. An unacknowledged RPC request has an id of 0.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Handshake.
	EnvelopeInfo *EnvelopeInfo `protobuf:"bytes,2,opt,name=envelope_info,json=envelopeInfo,proto3" json:"envelope_info,omitempty"`
	// Envelope initiated RPC requests.
	GetHealthRequest         *GetHealthRequest         `protobuf:"bytes,3,opt,name=get_health_request,json=getHealthRequest,proto3" json:"get_health_request,omitempty"`
	GetMetricsRequest        *GetMetricsRequest        `protobuf:"bytes,4,opt,name=get_metrics_request,json=getMetricsRequest,proto3" json:"get_metrics_request,omitempty"`
	GetLoadRequest           *GetLoadRequest           `protobuf:"bytes,5,opt,name=get_load_request,json=getLoadRequest,proto3" json:"get_load_request,omitempty"`
	GetProfileRequest        *GetProfileRequest        `protobuf:"bytes,6,opt,name=get_profile_request,json=getProfileRequest,proto3" json:"get_profile_request,omitempty"`
	UpdateRoutingInfoRequest *UpdateRoutingInfoRequest `protobuf:"bytes,7,opt,name=update_routing_info_request,json=updateRoutingInfoRequest,proto3" json:"update_routing_info_request,omitempty"`
	UpdateComponentsRequest  *UpdateComponentsRequest  `protobuf:"bytes,8,opt,name=update_components_request,json=updateComponentsRequest,proto3" json:"update_components_request,omitempty"`
	// Weavelet initiated RPC replies.
	Error                        string                        `protobuf:"bytes,9,opt,name=error,proto3" json:"error,omitempty"` // non-nil on error
	ActivateComponentReply       *ActivateComponentReply       `protobuf:"bytes,10,opt,name=activate_component_reply,json=activateComponentReply,proto3" json:"activate_component_reply,omitempty"`
	GetListenerAddressReply      *GetListenerAddressReply      `protobuf:"bytes,11,opt,name=get_listener_address_reply,json=getListenerAddressReply,proto3" json:"get_listener_address_reply,omitempty"`
	ExportListenerReply          *ExportListenerReply          `protobuf:"bytes,12,opt,name=export_listener_reply,json=exportListenerReply,proto3" json:"export_listener_reply,omitempty"`
	GetSelfCertificateReply      *GetSelfCertificateReply      `protobuf:"bytes,15,opt,name=get_self_certificate_reply,json=getSelfCertificateReply,proto3" json:"get_self_certificate_reply,omitempty"`
	VerifyClientCertificateReply *VerifyClientCertificateReply `protobuf:"bytes,13,opt,name=verify_client_certificate_reply,json=verifyClientCertificateReply,proto3" json:"verify_client_certificate_reply,omitempty"`
	VerifyServerCertificateReply *VerifyServerCertificateReply `protobuf:"bytes,14,opt,name=verify_server_certificate_reply,json=verifyServerCertificateReply,proto3" json:"verify_server_certificate_reply,omitempty"`
}

func (x *EnvelopeMsg) Reset() {
	*x = EnvelopeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvelopeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopeMsg) ProtoMessage() {}

func (x *EnvelopeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopeMsg.ProtoReflect.Descriptor instead.
func (*EnvelopeMsg) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{0}
}

func (x *EnvelopeMsg) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EnvelopeMsg) GetEnvelopeInfo() *EnvelopeInfo {
	if x != nil {
		return x.EnvelopeInfo
	}
	return nil
}

func (x *EnvelopeMsg) GetGetHealthRequest() *GetHealthRequest {
	if x != nil {
		return x.GetHealthRequest
	}
	return nil
}

func (x *EnvelopeMsg) GetGetMetricsRequest() *GetMetricsRequest {
	if x != nil {
		return x.GetMetricsRequest
	}
	return nil
}

func (x *EnvelopeMsg) GetGetLoadRequest() *GetLoadRequest {
	if x != nil {
		return x.GetLoadRequest
	}
	return nil
}

func (x *EnvelopeMsg) GetGetProfileRequest() *GetProfileRequest {
	if x != nil {
		return x.GetProfileRequest
	}
	return nil
}

func (x *EnvelopeMsg) GetUpdateRoutingInfoRequest() *UpdateRoutingInfoRequest {
	if x != nil {
		return x.UpdateRoutingInfoRequest
	}
	return nil
}

func (x *EnvelopeMsg) GetUpdateComponentsRequest() *UpdateComponentsRequest {
	if x != nil {
		return x.UpdateComponentsRequest
	}
	return nil
}

func (x *EnvelopeMsg) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *EnvelopeMsg) GetActivateComponentReply() *ActivateComponentReply {
	if x != nil {
		return x.ActivateComponentReply
	}
	return nil
}

func (x *EnvelopeMsg) GetGetListenerAddressReply() *GetListenerAddressReply {
	if x != nil {
		return x.GetListenerAddressReply
	}
	return nil
}

func (x *EnvelopeMsg) GetExportListenerReply() *ExportListenerReply {
	if x != nil {
		return x.ExportListenerReply
	}
	return nil
}

func (x *EnvelopeMsg) GetGetSelfCertificateReply() *GetSelfCertificateReply {
	if x != nil {
		return x.GetSelfCertificateReply
	}
	return nil
}

func (x *EnvelopeMsg) GetVerifyClientCertificateReply() *VerifyClientCertificateReply {
	if x != nil {
		return x.VerifyClientCertificateReply
	}
	return nil
}

func (x *EnvelopeMsg) GetVerifyServerCertificateReply() *VerifyServerCertificateReply {
	if x != nil {
		return x.VerifyServerCertificateReply
	}
	return nil
}

// WeaveletMsg is a message sent by a weavelet to an envelope.
type WeaveletMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique id for RPCs. An RPC request with positive id x expects a reply
	// with negative id -x. An unacknowledged RPC request has an id of 0.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Handshake.
	WeaveletInfo *WeaveletInfo `protobuf:"bytes,2,opt,name=weavelet_info,json=weaveletInfo,proto3" json:"weavelet_info,omitempty"`
	// Weavelet initiated unacknowledged RPCs.
	LogEntry   *LogEntry   `protobuf:"bytes,3,opt,name=log_entry,json=logEntry,proto3" json:"log_entry,omitempty"`
	TraceSpans *TraceSpans `protobuf:"bytes,4,opt,name=trace_spans,json=traceSpans,proto3" json:"trace_spans,omitempty"`
	// Envelope initiated RPC replies.
	Error                  string                  `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"` // non-nil on error
	GetHealthReply         *GetHealthReply         `protobuf:"bytes,6,opt,name=get_health_reply,json=getHealthReply,proto3" json:"get_health_reply,omitempty"`
	GetMetricsReply        *GetMetricsReply        `protobuf:"bytes,7,opt,name=get_metrics_reply,json=getMetricsReply,proto3" json:"get_metrics_reply,omitempty"`
	GetLoadReply           *GetLoadReply           `protobuf:"bytes,8,opt,name=get_load_reply,json=getLoadReply,proto3" json:"get_load_reply,omitempty"`
	GetProfileReply        *GetProfileReply        `protobuf:"bytes,9,opt,name=get_profile_reply,json=getProfileReply,proto3" json:"get_profile_reply,omitempty"`
	UpdateRoutingInfoReply *UpdateRoutingInfoReply `protobuf:"bytes,10,opt,name=update_routing_info_reply,json=updateRoutingInfoReply,proto3" json:"update_routing_info_reply,omitempty"`
	UpdateComponentsReply  *UpdateComponentsReply  `protobuf:"bytes,11,opt,name=update_components_reply,json=updateComponentsReply,proto3" json:"update_components_reply,omitempty"`
	// Weavelet initiated RPC requests.
	ActivateComponentRequest       *ActivateComponentRequest       `protobuf:"bytes,12,opt,name=activate_component_request,json=activateComponentRequest,proto3" json:"activate_component_request,omitempty"`
	GetListenerAddressRequest      *GetListenerAddressRequest      `protobuf:"bytes,13,opt,name=get_listener_address_request,json=getListenerAddressRequest,proto3" json:"get_listener_address_request,omitempty"`
	ExportListenerRequest          *ExportListenerRequest          `protobuf:"bytes,14,opt,name=export_listener_request,json=exportListenerRequest,proto3" json:"export_listener_request,omitempty"`
	GetSelfCertificateRequest      *GetSelfCertificateRequest      `protobuf:"bytes,17,opt,name=get_self_certificate_request,json=getSelfCertificateRequest,proto3" json:"get_self_certificate_request,omitempty"`
	VerifyClientCertificateRequest *VerifyClientCertificateRequest `protobuf:"bytes,15,opt,name=verify_client_certificate_request,json=verifyClientCertificateRequest,proto3" json:"verify_client_certificate_request,omitempty"`
	VerifyServerCertificateRequest *VerifyServerCertificateRequest `protobuf:"bytes,16,opt,name=verify_server_certificate_request,json=verifyServerCertificateRequest,proto3" json:"verify_server_certificate_request,omitempty"`
}

func (x *WeaveletMsg) Reset() {
	*x = WeaveletMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaveletMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaveletMsg) ProtoMessage() {}

func (x *WeaveletMsg) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaveletMsg.ProtoReflect.Descriptor instead.
func (*WeaveletMsg) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{1}
}

func (x *WeaveletMsg) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WeaveletMsg) GetWeaveletInfo() *WeaveletInfo {
	if x != nil {
		return x.WeaveletInfo
	}
	return nil
}

func (x *WeaveletMsg) GetLogEntry() *LogEntry {
	if x != nil {
		return x.LogEntry
	}
	return nil
}

func (x *WeaveletMsg) GetTraceSpans() *TraceSpans {
	if x != nil {
		return x.TraceSpans
	}
	return nil
}

func (x *WeaveletMsg) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *WeaveletMsg) GetGetHealthReply() *GetHealthReply {
	if x != nil {
		return x.GetHealthReply
	}
	return nil
}

func (x *WeaveletMsg) GetGetMetricsReply() *GetMetricsReply {
	if x != nil {
		return x.GetMetricsReply
	}
	return nil
}

func (x *WeaveletMsg) GetGetLoadReply() *GetLoadReply {
	if x != nil {
		return x.GetLoadReply
	}
	return nil
}

func (x *WeaveletMsg) GetGetProfileReply() *GetProfileReply {
	if x != nil {
		return x.GetProfileReply
	}
	return nil
}

func (x *WeaveletMsg) GetUpdateRoutingInfoReply() *UpdateRoutingInfoReply {
	if x != nil {
		return x.UpdateRoutingInfoReply
	}
	return nil
}

func (x *WeaveletMsg) GetUpdateComponentsReply() *UpdateComponentsReply {
	if x != nil {
		return x.UpdateComponentsReply
	}
	return nil
}

func (x *WeaveletMsg) GetActivateComponentRequest() *ActivateComponentRequest {
	if x != nil {
		return x.ActivateComponentRequest
	}
	return nil
}

func (x *WeaveletMsg) GetGetListenerAddressRequest() *GetListenerAddressRequest {
	if x != nil {
		return x.GetListenerAddressRequest
	}
	return nil
}

func (x *WeaveletMsg) GetExportListenerRequest() *ExportListenerRequest {
	if x != nil {
		return x.ExportListenerRequest
	}
	return nil
}

func (x *WeaveletMsg) GetGetSelfCertificateRequest() *GetSelfCertificateRequest {
	if x != nil {
		return x.GetSelfCertificateRequest
	}
	return nil
}

func (x *WeaveletMsg) GetVerifyClientCertificateRequest() *VerifyClientCertificateRequest {
	if x != nil {
		return x.VerifyClientCertificateRequest
	}
	return nil
}

func (x *WeaveletMsg) GetVerifyServerCertificateRequest() *VerifyServerCertificateRequest {
	if x != nil {
		return x.VerifyServerCertificateRequest
	}
	return nil
}

// EnvelopeInfo is the information provided by an envelope to a weavelet during
// the initial envelope-weavelet handshake.
type EnvelopeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App          string            `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`                                                                                                   // app name
	DeploymentId string            `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`                                                             // globally unique deployment id
	Id           string            `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`                                                                                                     // globally unique weavelet id
	Sections     map[string]string `protobuf:"bytes,4,rep,name=sections,proto3" json:"sections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // See AppConfig.Sections.
	RunMain      bool              `protobuf:"varint,7,opt,name=run_main,json=runMain,proto3" json:"run_main,omitempty"`                                                                           // run the main function?
	// Should weavelets establish mTLS connections with each other?
	Mtls bool `protobuf:"varint,8,opt,name=mtls,proto3" json:"mtls,omitempty"`
	// Address on which the weavelet's internal network listener should listen on
	// (e.g., "localhost:12345", ":0"). If the address is empty, it defaults to
	// ":0", like net.Listen.
	//
	// Note that for some deployers, the internal network listener can listen on
	// an arbitrary port (don't set the port number). However, for deployers where
	// listeners are prestarted (e.g., Kubernetes deployers), the port number
	// should be propagated from the deployer.
	InternalAddress string `protobuf:"bytes,10,opt,name=internal_address,json=internalAddress,proto3" json:"internal_address,omitempty"`
}

func (x *EnvelopeInfo) Reset() {
	*x = EnvelopeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvelopeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopeInfo) ProtoMessage() {}

func (x *EnvelopeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopeInfo.ProtoReflect.Descriptor instead.
func (*EnvelopeInfo) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{2}
}

func (x *EnvelopeInfo) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *EnvelopeInfo) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *EnvelopeInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnvelopeInfo) GetSections() map[string]string {
	if x != nil {
		return x.Sections
	}
	return nil
}

func (x *EnvelopeInfo) GetRunMain() bool {
	if x != nil {
		return x.RunMain
	}
	return false
}

func (x *EnvelopeInfo) GetMtls() bool {
	if x != nil {
		return x.Mtls
	}
	return false
}

func (x *EnvelopeInfo) GetInternalAddress() string {
	if x != nil {
		return x.InternalAddress
	}
	return ""
}

// WeaveletInfo is the information provided by a weavelet to an envelope during
// the initial envelope-weavelet handshake.
type WeaveletInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Internal TCP address of the weavelet. This address will be passed to other
	// weavelets as part of their RoutingInfo.
	DialAddr string `protobuf:"bytes,1,opt,name=dial_addr,json=dialAddr,proto3" json:"dial_addr,omitempty"`
	// The deployer API version of the weavelet.
	Version *SemVer `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *WeaveletInfo) Reset() {
	*x = WeaveletInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaveletInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaveletInfo) ProtoMessage() {}

func (x *WeaveletInfo) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaveletInfo.ProtoReflect.Descriptor instead.
func (*WeaveletInfo) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{3}
}

func (x *WeaveletInfo) GetDialAddr() string {
	if x != nil {
		return x.DialAddr
	}
	return ""
}

func (x *WeaveletInfo) GetVersion() *SemVer {
	if x != nil {
		return x.Version
	}
	return nil
}

// SemVer represents a [semantic version][1] of the form
// "<major>.<minor>.<patch>". For example, the semver "0.12.3" has major=0,
// minor=12, and patch=3.
//
// [1]: https://semver.org/
type SemVer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major int64 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor int64 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch int64 `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (x *SemVer) Reset() {
	*x = SemVer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemVer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemVer) ProtoMessage() {}

func (x *SemVer) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemVer.ProtoReflect.Descriptor instead.
func (*SemVer) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{4}
}

func (x *SemVer) GetMajor() int64 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *SemVer) GetMinor() int64 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *SemVer) GetPatch() int64 {
	if x != nil {
		return x.Patch
	}
	return 0
}

// GetHealthRequest is a request from an envelope for a weavelet's health.
type GetHealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetHealthRequest) Reset() {
	*x = GetHealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthRequest) ProtoMessage() {}

func (x *GetHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthRequest.ProtoReflect.Descriptor instead.
func (*GetHealthRequest) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{5}
}

// GetHealthReply is a reply to a GetHealthRequest.
type GetHealthReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status HealthStatus `protobuf:"varint,1,opt,name=status,proto3,enum=runtime.HealthStatus" json:"status,omitempty"`
}

func (x *GetHealthReply) Reset() {
	*x = GetHealthReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthReply) ProtoMessage() {}

func (x *GetHealthReply) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthReply.ProtoReflect.Descriptor instead.
func (*GetHealthReply) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{6}
}

func (x *GetHealthReply) GetStatus() HealthStatus {
	if x != nil {
		return x.Status
	}
	return HealthStatus_UNKNOWN
}

// GetMetricsRequest is a request from an envelope for a weavelet's metrics.
// There can only be one outstanding GetMetricsRequest at a time.
type GetMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMetricsRequest) Reset() {
	*x = GetMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsRequest) ProtoMessage() {}

func (x *GetMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetMetricsRequest) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{7}
}

// GetMetricsReply is a reply to a GetMetricsRequest. It only contains
// information about the metrics that have changed since the prior
// GetMetricsRequest.
type GetMetricsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update *MetricUpdate `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *GetMetricsReply) Reset() {
	*x = GetMetricsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsReply) ProtoMessage() {}

func (x *GetMetricsReply) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsReply.ProtoReflect.Descriptor instead.
func (*GetMetricsReply) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{8}
}

func (x *GetMetricsReply) GetUpdate() *MetricUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

// MetricUpdate contains metric updates.
type MetricUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metric definitions and updated values.
	//
	// All metrics are identified by their globally unique id. Two endpoints
	// exchanging metric updates must ensure that a received metric value has been
	// preceded by a metric definition with the same id, either in the current
	// update or an earlier one.
	Defs   []*MetricDef   `protobuf:"bytes,1,rep,name=defs,proto3" json:"defs,omitempty"`     // metric definitions
	Values []*MetricValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"` // metric values
}

func (x *MetricUpdate) Reset() {
	*x = MetricUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricUpdate) ProtoMessage() {}

func (x *MetricUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricUpdate.ProtoReflect.Descriptor instead.
func (*MetricUpdate) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{9}
}

func (x *MetricUpdate) GetDefs() []*MetricDef {
	if x != nil {
		return x.Defs
	}
	return nil
}

func (x *MetricUpdate) GetValues() []*MetricValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// MetricDef is the definition of a new metric.
type MetricDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                // metric's unique id
	Name   string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                             // name of the metric
	Typ    MetricType        `protobuf:"varint,3,opt,name=typ,proto3,enum=runtime.MetricType" json:"typ,omitempty"`                                                                      // type of metric
	Help   string            `protobuf:"bytes,4,opt,name=help,proto3" json:"help,omitempty"`                                                                                             // metric's help message
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // metric labels
	Bounds []float64         `protobuf:"fixed64,6,rep,packed,name=bounds,proto3" json:"bounds,omitempty"`                                                                                // histogram bucket bounds
}

func (x *MetricDef) Reset() {
	*x = MetricDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricDef) ProtoMessage() {}

func (x *MetricDef) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricDef.ProtoReflect.Descriptor instead.
func (*MetricDef) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{10}
}

func (x *MetricDef) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MetricDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricDef) GetTyp() MetricType {
	if x != nil {
		return x.Typ
	}
	return MetricType_INVALID
}

func (x *MetricDef) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *MetricDef) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetricDef) GetBounds() []float64 {
	if x != nil {
		return x.Bounds
	}
	return nil
}

// MetricValue is the value associated with a metric.
type MetricValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                // metric's unique id.
	Value  float64  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`         // value for counter and gauge, sum for histogram
	Counts []uint64 `protobuf:"varint,3,rep,packed,name=counts,proto3" json:"counts,omitempty"` // histogram counts
}

func (x *MetricValue) Reset() {
	*x = MetricValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricValue) ProtoMessage() {}

func (x *MetricValue) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricValue.ProtoReflect.Descriptor instead.
func (*MetricValue) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{11}
}

func (x *MetricValue) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MetricValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MetricValue) GetCounts() []uint64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

// MetricSnapshot is a snapshot of a metric. It is the union of a MetricDef and
// a MetricValue.
//
// TODO(mwhittaker): Move out of runtime.proto. It's not used by the pipe.
type MetricSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                // metric's unique id
	Name   string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                             // name of the metric
	Typ    MetricType        `protobuf:"varint,3,opt,name=typ,proto3,enum=runtime.MetricType" json:"typ,omitempty"`                                                                      // type of metric
	Help   string            `protobuf:"bytes,4,opt,name=help,proto3" json:"help,omitempty"`                                                                                             // metric's help message
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // metric labels
	Bounds []float64         `protobuf:"fixed64,6,rep,packed,name=bounds,proto3" json:"bounds,omitempty"`                                                                                // histogram bucket bounds
	Value  float64           `protobuf:"fixed64,7,opt,name=value,proto3" json:"value,omitempty"`                                                                                         // value for counter and gauge, sum for histogram
	Counts []uint64          `protobuf:"varint,8,rep,packed,name=counts,proto3" json:"counts,omitempty"`                                                                                 // histogram counts
}

func (x *MetricSnapshot) Reset() {
	*x = MetricSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricSnapshot) ProtoMessage() {}

func (x *MetricSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricSnapshot.ProtoReflect.Descriptor instead.
func (*MetricSnapshot) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{12}
}

func (x *MetricSnapshot) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MetricSnapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricSnapshot) GetTyp() MetricType {
	if x != nil {
		return x.Typ
	}
	return MetricType_INVALID
}

func (x *MetricSnapshot) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *MetricSnapshot) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetricSnapshot) GetBounds() []float64 {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *MetricSnapshot) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MetricSnapshot) GetCounts() []uint64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

// GetLoadRequest is a request from an envelope for a weavelet's load report.
type GetLoadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLoadRequest) Reset() {
	*x = GetLoadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadRequest) ProtoMessage() {}

func (x *GetLoadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadRequest.ProtoReflect.Descriptor instead.
func (*GetLoadRequest) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{13}
}

// GetLoadReply is a reply to a GetLoadRequest.
type GetLoadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Load *LoadReport `protobuf:"bytes,1,opt,name=load,proto3" json:"load,omitempty"`
}

func (x *GetLoadReply) Reset() {
	*x = GetLoadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadReply) ProtoMessage() {}

func (x *GetLoadReply) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadReply.ProtoReflect.Descriptor instead.
func (*GetLoadReply) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{14}
}

func (x *GetLoadReply) GetLoad() *LoadReport {
	if x != nil {
		return x.Load
	}
	return nil
}

// LoadReport contains load information for all routed components hosted by a
// particular weavelet.
type LoadReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loads map[string]*LoadReport_ComponentLoad `protobuf:"bytes,1,rep,name=loads,proto3" json:"loads,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // load for routed components
}

func (x *LoadReport) Reset() {
	*x = LoadReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadReport) ProtoMessage() {}

func (x *LoadReport) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadReport.ProtoReflect.Descriptor instead.
func (*LoadReport) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{15}
}

func (x *LoadReport) GetLoads() map[string]*LoadReport_ComponentLoad {
	if x != nil {
		return x.Loads
	}
	return nil
}

// GetProfileRequest is a request from an envelope for a weavelet to collect and
// return a profile. There can only be one outstanding GetProfileRequest at a
// time.
type GetProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the profile (e.g., heap, cpu).
	ProfileType ProfileType `protobuf:"varint,1,opt,name=profile_type,json=profileType,proto3,enum=runtime.ProfileType" json:"profile_type,omitempty"`
	// Duration of CPU profiles, in nanoseconds.
	CpuDurationNs int64 `protobuf:"varint,2,opt,name=cpu_duration_ns,json=cpuDurationNs,proto3" json:"cpu_duration_ns,omitempty"`
}

func (x *GetProfileRequest) Reset() {
	*x = GetProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileRequest) ProtoMessage() {}

func (x *GetProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileRequest.ProtoReflect.Descriptor instead.
func (*GetProfileRequest) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{16}
}

func (x *GetProfileRequest) GetProfileType() ProfileType {
	if x != nil {
		return x.ProfileType
	}
	return ProfileType_Unspecified
}

func (x *GetProfileRequest) GetCpuDurationNs() int64 {
	if x != nil {
		return x.CpuDurationNs
	}
	return 0
}

// GetProfileReply is a reply to a GetProfileRequest.
type GetProfileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // encoded profile data
}

func (x *GetProfileReply) Reset() {
	*x = GetProfileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileReply) ProtoMessage() {}

func (x *GetProfileReply) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileReply.ProtoReflect.Descriptor instead.
func (*GetProfileReply) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{17}
}

func (x *GetProfileReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// UpdateRoutingInfoRequest is a request from an envelope to the weavelet to
// update its routing information for a particular component.
type UpdateRoutingInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoutingInfo *RoutingInfo `protobuf:"bytes,1,opt,name=routing_info,json=routingInfo,proto3" json:"routing_info,omitempty"`
}

func (x *UpdateRoutingInfoRequest) Reset() {
	*x = UpdateRoutingInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoutingInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoutingInfoRequest) ProtoMessage() {}

func (x *UpdateRoutingInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoutingInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateRoutingInfoRequest) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateRoutingInfoRequest) GetRoutingInfo() *RoutingInfo {
	if x != nil {
		return x.RoutingInfo
	}
	return nil
}

// UpdateRoutingInfoReply is a reply to an UpdateRoutingInfoRequest.
type UpdateRoutingInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRoutingInfoReply) Reset() {
	*x = UpdateRoutingInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoutingInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoutingInfoReply) ProtoMessage() {}

func (x *UpdateRoutingInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoutingInfoReply.ProtoReflect.Descriptor instead.
func (*UpdateRoutingInfoReply) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{19}
}

// RoutingInfo contains routing information for a component. A weavelet uses a
// RoutingInfo to know where to send a remote method call.
type RoutingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component string `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// If true, perform method calls on the component locally. Replicas and
	// assignment are ignored. Currently, local must always be true or always be
	// false for a given component.
	Local bool `protobuf:"varint,2,opt,name=local,proto3" json:"local,omitempty"`
	// The addresses of the weavelets hosting a replica of the component. Every
	// address is of the form "<net>://<addr>" (e.g., "tcp://host:1234",
	// "unix:///tmp/unix.sock"). For non-local components, a weavelet will execute
	// method calls on one of these replicas.
	Replicas []string `protobuf:"bytes,3,rep,name=replicas,proto3" json:"replicas,omitempty"`
	// Routing assignment, if the component is routed.
	Assignment *Assignment `protobuf:"bytes,4,opt,name=assignment,proto3" json:"assignment,omitempty"`
}

func (x *RoutingInfo) Reset() {
	*x = RoutingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingInfo) ProtoMessage() {}

func (x *RoutingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingInfo.ProtoReflect.Descriptor instead.
func (*RoutingInfo) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{20}
}

func (x *RoutingInfo) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *RoutingInfo) GetLocal() bool {
	if x != nil {
		return x.Local
	}
	return false
}

func (x *RoutingInfo) GetReplicas() []string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *RoutingInfo) GetAssignment() *Assignment {
	if x != nil {
		return x.Assignment
	}
	return nil
}

// Assignment partitions a key space (e.g., the hash space [0, 2^64)) into a set
// of subregions, called slices, and assigns each slice to a set of replicas.
type Assignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slices []*Assignment_Slice `protobuf:"bytes,1,rep,name=slices,proto3" json:"slices,omitempty"`
	// The assignment for a component can change over time. Every one of these
	// assignments is given a monotonically increasing version. Versions are
	// unique for a given component, but not unique across components.
	Version uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Assignment) Reset() {
	*x = Assignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment) ProtoMessage() {}

func (x *Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment.ProtoReflect.Descriptor instead.
func (*Assignment) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{21}
}

func (x *Assignment) GetSlices() []*Assignment_Slice {
	if x != nil {
		return x.Slices
	}
	return nil
}

func (x *Assignment) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// UpdateComponentsRequest is a request from an envelope to the weavelet to
// update the set of components it should be running. Currently, the set of
// components must only ever increase over time.
type UpdateComponentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Components []string `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *UpdateComponentsRequest) Reset() {
	*x = UpdateComponentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateComponentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateComponentsRequest) ProtoMessage() {}

func (x *UpdateComponentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateComponentsRequest.ProtoReflect.Descriptor instead.
func (*UpdateComponentsRequest) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateComponentsRequest) GetComponents() []string {
	if x != nil {
		return x.Components
	}
	return nil
}

// UpdateComponentsReply is a reply to an UpdateComponentsRequest.
type UpdateComponentsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateComponentsReply) Reset() {
	*x = UpdateComponentsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateComponentsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateComponentsReply) ProtoMessage() {}

func (x *UpdateComponentsReply) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateComponentsReply.ProtoReflect.Descriptor instead.
func (*UpdateComponentsReply) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{23}
}

// ActivateComponentRequest is a request from a weavelet to ensure that the
// provided component is running somewhere. An ActivateComponentRequest also
// implicitly signals that a weavelet is interested in receiving routing info
// for the component via UpdateRoutingInfoRequest.
type ActivateComponentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component string `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"` // component name
	Routed    bool   `protobuf:"varint,2,opt,name=routed,proto3" json:"routed,omitempty"`      // is the component routed?
}

func (x *ActivateComponentRequest) Reset() {
	*x = ActivateComponentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateComponentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateComponentRequest) ProtoMessage() {}

func (x *ActivateComponentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateComponentRequest.ProtoReflect.Descriptor instead.
func (*ActivateComponentRequest) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{24}
}

func (x *ActivateComponentRequest) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *ActivateComponentRequest) GetRouted() bool {
	if x != nil {
		return x.Routed
	}
	return false
}

// ActivateComponentReply is a reply to an ActivateComponentRequest.
type ActivateComponentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateComponentReply) Reset() {
	*x = ActivateComponentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateComponentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateComponentReply) ProtoMessage() {}

func (x *ActivateComponentReply) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateComponentReply.ProtoReflect.Descriptor instead.
func (*ActivateComponentReply) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{25}
}

// GetListenerAddressRequest is a request from a weavelet for the address the
// weavelet should listen on for a particular listener.
//
// Imagine a weavelet calls GetListener with LocalAdress localhost:9000. Here
// are some examples of how different deployers may handle a
// GetListenerAddressRequest.
//
//   - The singleprocess deployer may instruct the weavelet to listen directly
//     on localhost:9000.
//   - The multiprocess deployer may instruct the weavelet to listen on
//     localhost:0. It will separately start a proxy on localhost:9000.
//   - The SSH deployer may instruct the weavelet to listen on
//     $HOSTNAME:0. It will separately start a proxy on localhost:9000.
type GetListenerAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // listener name
}

func (x *GetListenerAddressRequest) Reset() {
	*x = GetListenerAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListenerAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListenerAddressRequest) ProtoMessage() {}

func (x *GetListenerAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListenerAddressRequest.ProtoReflect.Descriptor instead.
func (*GetListenerAddressRequest) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{26}
}

func (x *GetListenerAddressRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetListenerAddressReply is a reply to a GetListenerAddressRequest.
type GetListenerAddressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // address to listen on
}

func (x *GetListenerAddressReply) Reset() {
	*x = GetListenerAddressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListenerAddressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListenerAddressReply) ProtoMessage() {}

func (x *GetListenerAddressReply) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListenerAddressReply.ProtoReflect.Descriptor instead.
func (*GetListenerAddressReply) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{27}
}

func (x *GetListenerAddressReply) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// ExportListenerRequest is a request from a weavelet to export the provided
// listener. Exporting a listener typically, but not always, involves running a
// proxy that forwards traffic to the provided address.
type ExportListenerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Listener string `protobuf:"bytes,1,opt,name=listener,proto3" json:"listener,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ExportListenerRequest) Reset() {
	*x = ExportListenerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportListenerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportListenerRequest) ProtoMessage() {}

func (x *ExportListenerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportListenerRequest.ProtoReflect.Descriptor instead.
func (*ExportListenerRequest) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{28}
}

func (x *ExportListenerRequest) GetListener() string {
	if x != nil {
		return x.Listener
	}
	return ""
}

func (x *ExportListenerRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// ExportListenerReply is a reply to an ExportListenerRequest.
type ExportListenerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the proxy that forwards traffic to the listener, or empty if
	// there is no proxy.
	ProxyAddress string `protobuf:"bytes,1,opt,name=proxy_address,json=proxyAddress,proto3" json:"proxy_address,omitempty"`
	// If non-empty, a non-retriable error.
	//
	// TODO(mwhittaker): This field exists as a hack to avoid a weavelet retrying
	// this error. In the future, we should have a more robust way to avoid
	// retrying certain errors.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ExportListenerReply) Reset() {
	*x = ExportListenerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportListenerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportListenerReply) ProtoMessage() {}

func (x *ExportListenerReply) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportListenerReply.ProtoReflect.Descriptor instead.
func (*ExportListenerReply) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{29}
}

func (x *ExportListenerReply) GetProxyAddress() string {
	if x != nil {
		return x.ProxyAddress
	}
	return ""
}

func (x *ExportListenerReply) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// GetSelfCertificateRequest is a request from a weavelet for its certificate
// and the corresponding private key.
type GetSelfCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSelfCertificateRequest) Reset() {
	*x = GetSelfCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSelfCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelfCertificateRequest) ProtoMessage() {}

func (x *GetSelfCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelfCertificateRequest.ProtoReflect.Descriptor instead.
func (*GetSelfCertificateRequest) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{30}
}

// GetSelfCertificateReply is a reply to a GetSelfCertificateRequest.
type GetSelfCertificateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PEM-encoded blocks containing (1) the certificate identifying the
	// weavelet and (2) the corresponding private key. Used for enforcing mTLS
	// security across components.
	Cert []byte `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"` // certificate identifying the weavelet
	Key  []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`   // private key corresponding to cert
}

func (x *GetSelfCertificateReply) Reset() {
	*x = GetSelfCertificateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSelfCertificateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelfCertificateReply) ProtoMessage() {}

func (x *GetSelfCertificateReply) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelfCertificateReply.ProtoReflect.Descriptor instead.
func (*GetSelfCertificateReply) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{31}
}

func (x *GetSelfCertificateReply) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *GetSelfCertificateReply) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// VerifyClientCertificateRequest is a request from a weavelet to verify
// the identity of a client that is attempting to connect to the weavelet.
type VerifyClientCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client's certificate chain. Each certificate in the chain is represented as
	// a DER-encoded ASN.1 structure.
	CertChain [][]byte `protobuf:"bytes,1,rep,name=cert_chain,json=certChain,proto3" json:"cert_chain,omitempty"`
}

func (x *VerifyClientCertificateRequest) Reset() {
	*x = VerifyClientCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyClientCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyClientCertificateRequest) ProtoMessage() {}

func (x *VerifyClientCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyClientCertificateRequest.ProtoReflect.Descriptor instead.
func (*VerifyClientCertificateRequest) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{32}
}

func (x *VerifyClientCertificateRequest) GetCertChain() [][]byte {
	if x != nil {
		return x.CertChain
	}
	return nil
}

// VerifyClientCertificateReply is a reply to a VerifyClientCertificateRequest.
// If the client certificate cannot be verified, an error should be returned
// rather than an empty reply.
type VerifyClientCertificateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of components hosted by the weavelet that the client is allowed to
	// invoke methods on.
	Components []string `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *VerifyClientCertificateReply) Reset() {
	*x = VerifyClientCertificateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyClientCertificateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyClientCertificateReply) ProtoMessage() {}

func (x *VerifyClientCertificateReply) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyClientCertificateReply.ProtoReflect.Descriptor instead.
func (*VerifyClientCertificateReply) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{33}
}

func (x *VerifyClientCertificateReply) GetComponents() []string {
	if x != nil {
		return x.Components
	}
	return nil
}

// VerifyServerCertificateRequest is a request from a weavelet to verify
// the identity of the server it is attempting to connect to.
type VerifyServerCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server's certificate chain. Each certificate in the chain is represented as
	// a DER-encoded ASN.1 structure.
	CertChain [][]byte `protobuf:"bytes,1,rep,name=cert_chain,json=certChain,proto3" json:"cert_chain,omitempty"`
	// Name of the component the server is meant to be hosting.
	TargetComponent string `protobuf:"bytes,2,opt,name=target_component,json=targetComponent,proto3" json:"target_component,omitempty"`
}

func (x *VerifyServerCertificateRequest) Reset() {
	*x = VerifyServerCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyServerCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyServerCertificateRequest) ProtoMessage() {}

func (x *VerifyServerCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyServerCertificateRequest.ProtoReflect.Descriptor instead.
func (*VerifyServerCertificateRequest) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{34}
}

func (x *VerifyServerCertificateRequest) GetCertChain() [][]byte {
	if x != nil {
		return x.CertChain
	}
	return nil
}

func (x *VerifyServerCertificateRequest) GetTargetComponent() string {
	if x != nil {
		return x.TargetComponent
	}
	return ""
}

// VerifyServerCertificateReply is a reply to a VerifyServerCertificateRequest.
type VerifyServerCertificateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerifyServerCertificateReply) Reset() {
	*x = VerifyServerCertificateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyServerCertificateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyServerCertificateReply) ProtoMessage() {}

func (x *VerifyServerCertificateReply) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyServerCertificateReply.ProtoReflect.Descriptor instead.
func (*VerifyServerCertificateReply) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{35}
}

// LogEntry is a log entry. Every log entry consists of a message (the thing the
// user logged) and a set of metadata describing the message.
type LogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App        string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`                                   // application name
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                           // deployment id
	Component  string `protobuf:"bytes,3,opt,name=component,proto3" json:"component,omitempty"`                       // component name
	Node       string `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty"`                                 // weavelet id
	TimeMicros int64  `protobuf:"fixed64,5,opt,name=time_micros,json=timeMicros,proto3" json:"time_micros,omitempty"` // time when logged (microseconds since epoch)
	Level      string `protobuf:"bytes,6,opt,name=level,proto3" json:"level,omitempty"`                               // log level (e.g., debug, info, error)
	File       string `protobuf:"bytes,7,opt,name=file,proto3" json:"file,omitempty"`                                 // source file
	Line       int32  `protobuf:"varint,8,opt,name=line,proto3" json:"line,omitempty"`                                // source line
	Msg        string `protobuf:"bytes,9,opt,name=msg,proto3" json:"msg,omitempty"`                                   // user provided message
	// User-provided attributes and their associated values. The storage format
	// is a name followed by its value, i.e.:
	//
	//	name1, value1, name2, value2, name3, value3, ...
	Attrs []string `protobuf:"bytes,10,rep,name=attrs,proto3" json:"attrs,omitempty"`
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{36}
}

func (x *LogEntry) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *LogEntry) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LogEntry) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *LogEntry) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *LogEntry) GetTimeMicros() int64 {
	if x != nil {
		return x.TimeMicros
	}
	return 0
}

func (x *LogEntry) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *LogEntry) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *LogEntry) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *LogEntry) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LogEntry) GetAttrs() []string {
	if x != nil {
		return x.Attrs
	}
	return nil
}

// TraceSpans is a list of Span messages.
type TraceSpans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Span []*Span `protobuf:"bytes,1,rep,name=span,proto3" json:"span,omitempty"`
}

func (x *TraceSpans) Reset() {
	*x = TraceSpans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceSpans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceSpans) ProtoMessage() {}

func (x *TraceSpans) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceSpans.ProtoReflect.Descriptor instead.
func (*TraceSpans) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{37}
}

func (x *TraceSpans) GetSpan() []*Span {
	if x != nil {
		return x.Span
	}
	return nil
}

// Span is a proto-based representation of an open-telemetry Span [1].
//
// [1]: https://opentelemetry.io/docs/concepts/signals/traces/#spans
// TODO(spetrovic): Rename to TraceSpan.
type Span struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                       // Span name
	TraceId      []byte            `protobuf:"bytes,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`                  // Span trace id, 16 bytes long.
	SpanId       []byte            `protobuf:"bytes,3,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`                     // Unique span id, 8 bytes long.
	ParentSpanId []byte            `protobuf:"bytes,4,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"` // Parent span id, 8 bytes long
	Kind         Span_Kind         `protobuf:"varint,5,opt,name=kind,proto3,enum=runtime.Span_Kind" json:"kind,omitempty"`
	StartMicros  int64             `protobuf:"fixed64,6,opt,name=start_micros,json=startMicros,proto3" json:"start_micros,omitempty"` // Span start time (microseconds since epoch)
	EndMicros    int64             `protobuf:"fixed64,7,opt,name=end_micros,json=endMicros,proto3" json:"end_micros,omitempty"`       // Span end time (microseconds since epoch)
	Attributes   []*Span_Attribute `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Links        []*Span_Link      `protobuf:"bytes,9,rep,name=links,proto3" json:"links,omitempty"`    // Links to other spans
	Events       []*Span_Event     `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"` // Events that occured in the span's lifetime
	Status       *Span_Status      `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"` // Span status
	Scope        *Span_Scope       `protobuf:"bytes,18,opt,name=scope,proto3" json:"scope,omitempty"`
	Library      *Span_Library     `protobuf:"bytes,12,opt,name=library,proto3" json:"library,omitempty"` // Instrumentation library that created the span
	Resource     *Span_Resource    `protobuf:"bytes,13,opt,name=resource,proto3" json:"resource,omitempty"`
	// Number of span attributes dropped due to limits being reached.
	DroppedAttributeCount int64 `protobuf:"varint,14,opt,name=dropped_attribute_count,json=droppedAttributeCount,proto3" json:"dropped_attribute_count,omitempty"`
	// Number of links dropped due to limits being reached.
	DroppedLinkCount int64 `protobuf:"varint,15,opt,name=dropped_link_count,json=droppedLinkCount,proto3" json:"dropped_link_count,omitempty"`
	// Number of events dropped due to limits being reached.
	DroppedEventCount int64 `protobuf:"varint,16,opt,name=dropped_event_count,json=droppedEventCount,proto3" json:"dropped_event_count,omitempty"`
	// Number of spans that consider this span a direct parent.
	ChildSpanCount int64 `protobuf:"varint,17,opt,name=child_span_count,json=childSpanCount,proto3" json:"child_span_count,omitempty"`
}

func (x *Span) Reset() {
	*x = Span{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{38}
}

func (x *Span) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Span) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *Span) GetSpanId() []byte {
	if x != nil {
		return x.SpanId
	}
	return nil
}

func (x *Span) GetParentSpanId() []byte {
	if x != nil {
		return x.ParentSpanId
	}
	return nil
}

func (x *Span) GetKind() Span_Kind {
	if x != nil {
		return x.Kind
	}
	return Span_UNSPECIFIED
}

func (x *Span) GetStartMicros() int64 {
	if x != nil {
		return x.StartMicros
	}
	return 0
}

func (x *Span) GetEndMicros() int64 {
	if x != nil {
		return x.EndMicros
	}
	return 0
}

func (x *Span) GetAttributes() []*Span_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Span) GetLinks() []*Span_Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Span) GetEvents() []*Span_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Span) GetStatus() *Span_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Span) GetScope() *Span_Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *Span) GetLibrary() *Span_Library {
	if x != nil {
		return x.Library
	}
	return nil
}

func (x *Span) GetResource() *Span_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Span) GetDroppedAttributeCount() int64 {
	if x != nil {
		return x.DroppedAttributeCount
	}
	return 0
}

func (x *Span) GetDroppedLinkCount() int64 {
	if x != nil {
		return x.DroppedLinkCount
	}
	return 0
}

func (x *Span) GetDroppedEventCount() int64 {
	if x != nil {
		return x.DroppedEventCount
	}
	return 0
}

func (x *Span) GetChildSpanCount() int64 {
	if x != nil {
		return x.ChildSpanCount
	}
	return 0
}

// ComponentLoad includes load information for a component. The component's
// key space is divided into a number of slices, each of which is associated
// with a particular double-valued load.
//
// TODO(mwhittaker): In the short term, a weavelet will report one SliceLoad
// for every slice it is assigned. In the future, however, we may report load
// in more advanced ways.
type LoadReport_ComponentLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(mwhittaker): In full generality, load is a generic
	// application-specific double-valued measurement (e.g., total number of
	// requests, size of components in memory). For now to simplify things, we
	// assume load is measured as requests per second.
	Load []*LoadReport_SliceLoad `protobuf:"bytes,1,rep,name=load,proto3" json:"load,omitempty"`
	// TODO(mwhittaker): For now, load is reported with respect to a given
	// assignment. When the assignment changes, the load is reset. This approach
	// works for rate-based load like requests per second, but not other
	// non-rate based load like size of cached components.
	Version uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *LoadReport_ComponentLoad) Reset() {
	*x = LoadReport_ComponentLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadReport_ComponentLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadReport_ComponentLoad) ProtoMessage() {}

func (x *LoadReport_ComponentLoad) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadReport_ComponentLoad.ProtoReflect.Descriptor instead.
func (*LoadReport_ComponentLoad) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{15, 1}
}

func (x *LoadReport_ComponentLoad) GetLoad() []*LoadReport_SliceLoad {
	if x != nil {
		return x.Load
	}
	return nil
}

func (x *LoadReport_ComponentLoad) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// SliceLoad includes the load of a slice, [start, end).
type LoadReport_SliceLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start  uint64                     `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"` // inclusive
	End    uint64                     `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`     // exclusive
	Load   float64                    `protobuf:"fixed64,3,opt,name=load,proto3" json:"load,omitempty"`
	Splits []*LoadReport_SubsliceLoad `protobuf:"bytes,4,rep,name=splits,proto3" json:"splits,omitempty"`
	// The "size" of the slice. Given a slice [a, b), it's tempting to think
	// the slice has size b - a. This has a couple of problems.
	//
	//  1. Even if a slice is large, only a few keys in the slice may be
	//     used. For example, a weavelet with slice [0, 2^60) may only
	//     receive requests for keys in the range [0, 100).
	//  2. a and b are not necessarily numeric. Imagine we are performing
	//     range sharding on strings and have the slice ["ccbae",
	//     "hhaefi"). What is the size of this slice?
	//
	// We instead measure the "size" of a slice as an estimate of the number
	// of keys accessed in the slice. For example, if a slice [0, 1000)
	// receives requests for keys 0, 1, 2, 3, and 10, then the size of the
	// slice is 5.
	Size uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *LoadReport_SliceLoad) Reset() {
	*x = LoadReport_SliceLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadReport_SliceLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadReport_SliceLoad) ProtoMessage() {}

func (x *LoadReport_SliceLoad) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadReport_SliceLoad.ProtoReflect.Descriptor instead.
func (*LoadReport_SliceLoad) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{15, 2}
}

func (x *LoadReport_SliceLoad) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *LoadReport_SliceLoad) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *LoadReport_SliceLoad) GetLoad() float64 {
	if x != nil {
		return x.Load
	}
	return 0
}

func (x *LoadReport_SliceLoad) GetSplits() []*LoadReport_SubsliceLoad {
	if x != nil {
		return x.Splits
	}
	return nil
}

func (x *LoadReport_SliceLoad) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// SubsliceLoad divides the load of a slice into smaller subslices. For
// example, given a slice [0, 100) and load 9.0, we may have the following
// subslices:
//
//	SubsliceLoad{Start:  0, Load: 3.0} // [0, 20)
//	SubsliceLoad{Start: 20, Load: 3.0} // [20, 80)
//	SubsliceLoad{Start: 80, Load: 3.0} // [80, 100)
//
// TODO(mwhittaker): In the future, we likely want to report hot keys as
// their own slice. Change SubsliceLoad to support that.
type LoadReport_SubsliceLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start uint64  `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Load  float64 `protobuf:"fixed64,2,opt,name=load,proto3" json:"load,omitempty"`
}

func (x *LoadReport_SubsliceLoad) Reset() {
	*x = LoadReport_SubsliceLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadReport_SubsliceLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadReport_SubsliceLoad) ProtoMessage() {}

func (x *LoadReport_SubsliceLoad) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadReport_SubsliceLoad.ProtoReflect.Descriptor instead.
func (*LoadReport_SubsliceLoad) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{15, 3}
}

func (x *LoadReport_SubsliceLoad) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *LoadReport_SubsliceLoad) GetLoad() float64 {
	if x != nil {
		return x.Load
	}
	return 0
}

// A slice of the key space and the replicas to which it is assigned.
type Assignment_Slice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inclusive start key. Strictly greater than the `start` value for the
	// previous entry in the current assignment.
	//
	// The first slice should always set start to 0.
	Start uint64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// Replicas assigned to host this slice. Every address is of the form
	// "<net>://<addr>" (e.g., "tcp://host:1234", "unix:///tmp/unix.sock").
	Replicas []string `protobuf:"bytes,2,rep,name=replicas,proto3" json:"replicas,omitempty"`
}

func (x *Assignment_Slice) Reset() {
	*x = Assignment_Slice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assignment_Slice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment_Slice) ProtoMessage() {}

func (x *Assignment_Slice) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment_Slice.ProtoReflect.Descriptor instead.
func (*Assignment_Slice) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{21, 0}
}

func (x *Assignment_Slice) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Assignment_Slice) GetReplicas() []string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

// Span attributes.
type Span_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string                `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *Span_Attribute_Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Span_Attribute) Reset() {
	*x = Span_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Attribute) ProtoMessage() {}

func (x *Span_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Attribute.ProtoReflect.Descriptor instead.
func (*Span_Attribute) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{38, 0}
}

func (x *Span_Attribute) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Span_Attribute) GetValue() *Span_Attribute_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Link represents the link a span has to another span.
type Span_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId    []byte            `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"` // Span trace id
	SpanId     []byte            `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`    // Unique span id
	Attributes []*Span_Attribute `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`          // Span attributes
	// Number of span attributes dropped due to limits being reached
	DroppedAttributeCount int64 `protobuf:"varint,4,opt,name=dropped_attribute_count,json=droppedAttributeCount,proto3" json:"dropped_attribute_count,omitempty"`
}

func (x *Span_Link) Reset() {
	*x = Span_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Link) ProtoMessage() {}

func (x *Span_Link) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Link.ProtoReflect.Descriptor instead.
func (*Span_Link) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{38, 1}
}

func (x *Span_Link) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *Span_Link) GetSpanId() []byte {
	if x != nil {
		return x.SpanId
	}
	return nil
}

func (x *Span_Link) GetAttributes() []*Span_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Span_Link) GetDroppedAttributeCount() int64 {
	if x != nil {
		return x.DroppedAttributeCount
	}
	return 0
}

// Event represent an event that occurred in the span's lifetime.
type Span_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                 // Even name
	TimeMicros int64             `protobuf:"fixed64,2,opt,name=time_micros,json=timeMicros,proto3" json:"time_micros,omitempty"` // Time event was recorded (micros since epoch)
	Attributes []*Span_Attribute `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`                     // Event attributes
	// Number of attributes dropped due to limits being reached.
	DroppedAttributeCount int64 `protobuf:"varint,4,opt,name=dropped_attribute_count,json=droppedAttributeCount,proto3" json:"dropped_attribute_count,omitempty"`
}

func (x *Span_Event) Reset() {
	*x = Span_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Event) ProtoMessage() {}

func (x *Span_Event) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Event.ProtoReflect.Descriptor instead.
func (*Span_Event) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{38, 2}
}

func (x *Span_Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Span_Event) GetTimeMicros() int64 {
	if x != nil {
		return x.TimeMicros
	}
	return 0
}

func (x *Span_Event) GetAttributes() []*Span_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Span_Event) GetDroppedAttributeCount() int64 {
	if x != nil {
		return x.DroppedAttributeCount
	}
	return 0
}

// Status represents the status for a span.
type Span_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  Span_Status_Code `protobuf:"varint,1,opt,name=code,proto3,enum=runtime.Span_Status_Code" json:"code,omitempty"` // Span status code
	Error string           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`                              // Error text; set only for an ERROR code
}

func (x *Span_Status) Reset() {
	*x = Span_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Status) ProtoMessage() {}

func (x *Span_Status) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Status.ProtoReflect.Descriptor instead.
func (*Span_Status) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{38, 3}
}

func (x *Span_Status) GetCode() Span_Status_Code {
	if x != nil {
		return x.Code
	}
	return Span_Status_UNSET
}

func (x *Span_Status) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Scope stores information about the instrumentation scope that created the span.
type Span_Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the instrumentation library, typically the package name of
	// the library.
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version   string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                      // The version of the instrumentation scope
	SchemaUrl string `protobuf:"bytes,3,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"` // Schema url of the telemetry emitted by scope
}

func (x *Span_Scope) Reset() {
	*x = Span_Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Scope) ProtoMessage() {}

func (x *Span_Scope) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Scope.ProtoReflect.Descriptor instead.
func (*Span_Scope) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{38, 4}
}

func (x *Span_Scope) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Span_Scope) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Span_Scope) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

// Library stores information about the instrumentation library that
// created the span.
type Span_Library struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the instrumentation library, typically the package name of
	// the library.
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version   string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                      // The version of the instrumentation library
	SchemaUrl string `protobuf:"bytes,3,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"` // Schema url of the telemetry emitted by library
}

func (x *Span_Library) Reset() {
	*x = Span_Library{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Library) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Library) ProtoMessage() {}

func (x *Span_Library) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Library.ProtoReflect.Descriptor instead.
func (*Span_Library) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{38, 5}
}

func (x *Span_Library) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Span_Library) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Span_Library) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

// Resource describes an entity (e.g., a Service Weaver component) this span
// belongs to.
type Span_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL that describes the shape and a composition of data for this span.
	SchemaUrl  string            `protobuf:"bytes,1,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
	Attributes []*Span_Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"` // Resource attributes
}

func (x *Span_Resource) Reset() {
	*x = Span_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Resource) ProtoMessage() {}

func (x *Span_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Resource.ProtoReflect.Descriptor instead.
func (*Span_Resource) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{38, 6}
}

func (x *Span_Resource) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

func (x *Span_Resource) GetAttributes() []*Span_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type Span_Attribute_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Span_Attribute_Value_Type `protobuf:"varint,1,opt,name=type,proto3,enum=runtime.Span_Attribute_Value_Type" json:"type,omitempty"` // Attribute type
	// Types that are assignable to Value:
	//
	//	*Span_Attribute_Value_Num
	//	*Span_Attribute_Value_Str
	//	*Span_Attribute_Value_Nums
	//	*Span_Attribute_Value_Strs
	Value isSpan_Attribute_Value_Value `protobuf_oneof:"value"`
}

func (x *Span_Attribute_Value) Reset() {
	*x = Span_Attribute_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Attribute_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Attribute_Value) ProtoMessage() {}

func (x *Span_Attribute_Value) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Attribute_Value.ProtoReflect.Descriptor instead.
func (*Span_Attribute_Value) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{38, 0, 0}
}

func (x *Span_Attribute_Value) GetType() Span_Attribute_Value_Type {
	if x != nil {
		return x.Type
	}
	return Span_Attribute_Value_INVALID
}

func (m *Span_Attribute_Value) GetValue() isSpan_Attribute_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Span_Attribute_Value) GetNum() uint64 {
	if x, ok := x.GetValue().(*Span_Attribute_Value_Num); ok {
		return x.Num
	}
	return 0
}

func (x *Span_Attribute_Value) GetStr() string {
	if x, ok := x.GetValue().(*Span_Attribute_Value_Str); ok {
		return x.Str
	}
	return ""
}

func (x *Span_Attribute_Value) GetNums() *Span_Attribute_Value_NumberList {
	if x, ok := x.GetValue().(*Span_Attribute_Value_Nums); ok {
		return x.Nums
	}
	return nil
}

func (x *Span_Attribute_Value) GetStrs() *Span_Attribute_Value_StringList {
	if x, ok := x.GetValue().(*Span_Attribute_Value_Strs); ok {
		return x.Strs
	}
	return nil
}

type isSpan_Attribute_Value_Value interface {
	isSpan_Attribute_Value_Value()
}

type Span_Attribute_Value_Num struct {
	Num uint64 `protobuf:"varint,2,opt,name=num,proto3,oneof"`
}

type Span_Attribute_Value_Str struct {
	Str string `protobuf:"bytes,3,opt,name=str,proto3,oneof"`
}

type Span_Attribute_Value_Nums struct {
	Nums *Span_Attribute_Value_NumberList `protobuf:"bytes,4,opt,name=nums,proto3,oneof"`
}

type Span_Attribute_Value_Strs struct {
	Strs *Span_Attribute_Value_StringList `protobuf:"bytes,5,opt,name=strs,proto3,oneof"`
}

func (*Span_Attribute_Value_Num) isSpan_Attribute_Value_Value() {}

func (*Span_Attribute_Value_Str) isSpan_Attribute_Value_Value() {}

func (*Span_Attribute_Value_Nums) isSpan_Attribute_Value_Value() {}

func (*Span_Attribute_Value_Strs) isSpan_Attribute_Value_Value() {}

type Span_Attribute_Value_NumberList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nums []uint64 `protobuf:"varint,1,rep,packed,name=nums,proto3" json:"nums,omitempty"`
}

func (x *Span_Attribute_Value_NumberList) Reset() {
	*x = Span_Attribute_Value_NumberList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Attribute_Value_NumberList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Attribute_Value_NumberList) ProtoMessage() {}

func (x *Span_Attribute_Value_NumberList) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Attribute_Value_NumberList.ProtoReflect.Descriptor instead.
func (*Span_Attribute_Value_NumberList) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{38, 0, 0, 0}
}

func (x *Span_Attribute_Value_NumberList) GetNums() []uint64 {
	if x != nil {
		return x.Nums
	}
	return nil
}

type Span_Attribute_Value_StringList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strs []string `protobuf:"bytes,2,rep,name=strs,proto3" json:"strs,omitempty"`
}

func (x *Span_Attribute_Value_StringList) Reset() {
	*x = Span_Attribute_Value_StringList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_protos_runtime_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Attribute_Value_StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Attribute_Value_StringList) ProtoMessage() {}

func (x *Span_Attribute_Value_StringList) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_protos_runtime_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Attribute_Value_StringList.ProtoReflect.Descriptor instead.
func (*Span_Attribute_Value_StringList) Descriptor() ([]byte, []int) {
	return file_runtime_protos_runtime_proto_rawDescGZIP(), []int{38, 0, 0, 1}
}

func (x *Span_Attribute_Value_StringList) GetStrs() []string {
	if x != nil {
		return x.Strs
	}
	return nil
}

var File_runtime_protos_runtime_proto protoreflect.FileDescriptor

var file_runtime_protos_runtime_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x9a, 0x09, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x67, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x13,
	0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x65, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x1b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x19, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x59, 0x0a,
	0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x17,
	0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x50, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x52, 0x13, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x1a, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52,
	0x17, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6c, 0x0a, 0x1f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x1c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6c, 0x0a, 0x1f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x1c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x80, 0x0a, 0x0a, 0x0b, 0x57, 0x65, 0x61, 0x76, 0x65, 0x6c, 0x65,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x77, 0x65, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x77, 0x65, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x10,
	0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52,
	0x0e, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5a, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x16, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x56, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5f, 0x0a, 0x1a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a,
	0x1c, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x56, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x15, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x1c, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x6c, 0x66, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x72, 0x0a, 0x21, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x1e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x21, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xad, 0x02, 0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x74, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a, 0x0c, 0x57, 0x65, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x53, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x4a, 0x0a, 0x06, 0x53, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22, 0x12, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x3f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x64, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x65, 0x66, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x66, 0x52, 0x04, 0x64, 0x65, 0x66, 0x73, 0x12,
	0x2c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xf5, 0x01,
	0x0a, 0x09, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x03, 0x74, 0x79, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x03, 0x74, 0x79, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x12, 0x36, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x66, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x74, 0x79, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x79, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x65, 0x6c, 0x70, 0x12, 0x3b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xcf, 0x03,
	0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x05,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x1a, 0x5b, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5c, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64,
	0x12, 0x31, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x95, 0x01,
	0x0a, 0x09, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0x38, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x74, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x70, 0x75, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x70, 0x75, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x73, 0x22, 0x25, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x0b,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x94, 0x01, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x05,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x39, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x50, 0x0a, 0x18, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x22, 0x18, 0x0a,
	0x16, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4d, 0x0a,
	0x15, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x50, 0x0a, 0x13,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1b,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x3f, 0x0a, 0x1e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x3e, 0x0a,
	0x1c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6a, 0x0a,
	0x1e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xef, 0x01, 0x0a, 0x08, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x22, 0x2f, 0x0a, 0x0a, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x70, 0x61,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x22, 0xb9, 0x10, 0x0a,
	0x04, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x10, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x10, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x37, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0x2b, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x07,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x64,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x53, 0x70, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x8a, 0x04, 0x0a, 0x09,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0xb5, 0x03, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x75,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x74,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x72, 0x73, 0x1a, 0x20, 0x0a, 0x0a, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x73, 0x1a, 0x20, 0x0a, 0x0a,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x72, 0x73, 0x22, 0x7f,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4c, 0x4f, 0x41,
	0x54, 0x36, 0x34, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x4f, 0x4f, 0x4c, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x05, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x0f,
	0x0a, 0x0b, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x07, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x08, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xab, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73,
	0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xad, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x73, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x24, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x02, 0x1a, 0x54, 0x0a, 0x05, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72,
	0x6c, 0x1a, 0x56, 0x0a, 0x07, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x1a, 0x62, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x59, 0x0a,
	0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f,
	0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x10, 0x05, 0x2a, 0x47, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0x40, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x41, 0x55,
	0x47, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41,
	0x4d, 0x10, 0x03, 0x2a, 0x31, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x43, 0x50, 0x55, 0x10, 0x02, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x61, 0x76,
	0x65, 0x72, 0x2f, 0x77, 0x65, 0x61, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_runtime_protos_runtime_proto_rawDescOnce sync.Once
	file_runtime_protos_runtime_proto_rawDescData = file_runtime_protos_runtime_proto_rawDesc
)

func file_runtime_protos_runtime_proto_rawDescGZIP() []byte {
	file_runtime_protos_runtime_proto_rawDescOnce.Do(func() {
		file_runtime_protos_runtime_proto_rawDescData = protoimpl.X.CompressGZIP(file_runtime_protos_runtime_proto_rawDescData)
	})
	return file_runtime_protos_runtime_proto_rawDescData
}

var file_runtime_protos_runtime_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_runtime_protos_runtime_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_runtime_protos_runtime_proto_goTypes = []interface{}{
	(HealthStatus)(0),                       // 0: runtime.HealthStatus
	(MetricType)(0),                         // 1: runtime.MetricType
	(ProfileType)(0),                        // 2: runtime.ProfileType
	(Span_Kind)(0),                          // 3: runtime.Span.Kind
	(Span_Attribute_Value_Type)(0),          // 4: runtime.Span.Attribute.Value.Type
	(Span_Status_Code)(0),                   // 5: runtime.Span.Status.Code
	(*EnvelopeMsg)(nil),                     // 6: runtime.EnvelopeMsg
	(*WeaveletMsg)(nil),                     // 7: runtime.WeaveletMsg
	(*EnvelopeInfo)(nil),                    // 8: runtime.EnvelopeInfo
	(*WeaveletInfo)(nil),                    // 9: runtime.WeaveletInfo
	(*SemVer)(nil),                          // 10: runtime.SemVer
	(*GetHealthRequest)(nil),                // 11: runtime.GetHealthRequest
	(*GetHealthReply)(nil),                  // 12: runtime.GetHealthReply
	(*GetMetricsRequest)(nil),               // 13: runtime.GetMetricsRequest
	(*GetMetricsReply)(nil),                 // 14: runtime.GetMetricsReply
	(*MetricUpdate)(nil),                    // 15: runtime.MetricUpdate
	(*MetricDef)(nil),                       // 16: runtime.MetricDef
	(*MetricValue)(nil),                     // 17: runtime.MetricValue
	(*MetricSnapshot)(nil),                  // 18: runtime.MetricSnapshot
	(*GetLoadRequest)(nil),                  // 19: runtime.GetLoadRequest
	(*GetLoadReply)(nil),                    // 20: runtime.GetLoadReply
	(*LoadReport)(nil),                      // 21: runtime.LoadReport
	(*GetProfileRequest)(nil),               // 22: runtime.GetProfileRequest
	(*GetProfileReply)(nil),                 // 23: runtime.GetProfileReply
	(*UpdateRoutingInfoRequest)(nil),        // 24: runtime.UpdateRoutingInfoRequest
	(*UpdateRoutingInfoReply)(nil),          // 25: runtime.UpdateRoutingInfoReply
	(*RoutingInfo)(nil),                     // 26: runtime.RoutingInfo
	(*Assignment)(nil),                      // 27: runtime.Assignment
	(*UpdateComponentsRequest)(nil),         // 28: runtime.UpdateComponentsRequest
	(*UpdateComponentsReply)(nil),           // 29: runtime.UpdateComponentsReply
	(*ActivateComponentRequest)(nil),        // 30: runtime.ActivateComponentRequest
	(*ActivateComponentReply)(nil),          // 31: runtime.ActivateComponentReply
	(*GetListenerAddressRequest)(nil),       // 32: runtime.GetListenerAddressRequest
	(*GetListenerAddressReply)(nil),         // 33: runtime.GetListenerAddressReply
	(*ExportListenerRequest)(nil),           // 34: runtime.ExportListenerRequest
	(*ExportListenerReply)(nil),             // 35: runtime.ExportListenerReply
	(*GetSelfCertificateRequest)(nil),       // 36: runtime.GetSelfCertificateRequest
	(*GetSelfCertificateReply)(nil),         // 37: runtime.GetSelfCertificateReply
	(*VerifyClientCertificateRequest)(nil),  // 38: runtime.VerifyClientCertificateRequest
	(*VerifyClientCertificateReply)(nil),    // 39: runtime.VerifyClientCertificateReply
	(*VerifyServerCertificateRequest)(nil),  // 40: runtime.VerifyServerCertificateRequest
	(*VerifyServerCertificateReply)(nil),    // 41: runtime.VerifyServerCertificateReply
	(*LogEntry)(nil),                        // 42: runtime.LogEntry
	(*TraceSpans)(nil),                      // 43: runtime.TraceSpans
	(*Span)(nil),                            // 44: runtime.Span
	nil,                                     // 45: runtime.EnvelopeInfo.SectionsEntry
	nil,                                     // 46: runtime.MetricDef.LabelsEntry
	nil,                                     // 47: runtime.MetricSnapshot.LabelsEntry
	nil,                                     // 48: runtime.LoadReport.LoadsEntry
	(*LoadReport_ComponentLoad)(nil),        // 49: runtime.LoadReport.ComponentLoad
	(*LoadReport_SliceLoad)(nil),            // 50: runtime.LoadReport.SliceLoad
	(*LoadReport_SubsliceLoad)(nil),         // 51: runtime.LoadReport.SubsliceLoad
	(*Assignment_Slice)(nil),                // 52: runtime.Assignment.Slice
	(*Span_Attribute)(nil),                  // 53: runtime.Span.Attribute
	(*Span_Link)(nil),                       // 54: runtime.Span.Link
	(*Span_Event)(nil),                      // 55: runtime.Span.Event
	(*Span_Status)(nil),                     // 56: runtime.Span.Status
	(*Span_Scope)(nil),                      // 57: runtime.Span.Scope
	(*Span_Library)(nil),                    // 58: runtime.Span.Library
	(*Span_Resource)(nil),                   // 59: runtime.Span.Resource
	(*Span_Attribute_Value)(nil),            // 60: runtime.Span.Attribute.Value
	(*Span_Attribute_Value_NumberList)(nil), // 61: runtime.Span.Attribute.Value.NumberList
	(*Span_Attribute_Value_StringList)(nil), // 62: runtime.Span.Attribute.Value.StringList
}
var file_runtime_protos_runtime_proto_depIdxs = []int32{
	8,  // 0: runtime.EnvelopeMsg.envelope_info:type_name -> runtime.EnvelopeInfo
	11, // 1: runtime.EnvelopeMsg.get_health_request:type_name -> runtime.GetHealthRequest
	13, // 2: runtime.EnvelopeMsg.get_metrics_request:type_name -> runtime.GetMetricsRequest
	19, // 3: runtime.EnvelopeMsg.get_load_request:type_name -> runtime.GetLoadRequest
	22, // 4: runtime.EnvelopeMsg.get_profile_request:type_name -> runtime.GetProfileRequest
	24, // 5: runtime.EnvelopeMsg.update_routing_info_request:type_name -> runtime.UpdateRoutingInfoRequest
	28, // 6: runtime.EnvelopeMsg.update_components_request:type_name -> runtime.UpdateComponentsRequest
	31, // 7: runtime.EnvelopeMsg.activate_component_reply:type_name -> runtime.ActivateComponentReply
	33, // 8: runtime.EnvelopeMsg.get_listener_address_reply:type_name -> runtime.GetListenerAddressReply
	35, // 9: runtime.EnvelopeMsg.export_listener_reply:type_name -> runtime.ExportListenerReply
	37, // 10: runtime.EnvelopeMsg.get_self_certificate_reply:type_name -> runtime.GetSelfCertificateReply
	39, // 11: runtime.EnvelopeMsg.verify_client_certificate_reply:type_name -> runtime.VerifyClientCertificateReply
	41, // 12: runtime.EnvelopeMsg.verify_server_certificate_reply:type_name -> runtime.VerifyServerCertificateReply
	9,  // 13: runtime.WeaveletMsg.weavelet_info:type_name -> runtime.WeaveletInfo
	42, // 14: runtime.WeaveletMsg.log_entry:type_name -> runtime.LogEntry
	43, // 15: runtime.WeaveletMsg.trace_spans:type_name -> runtime.TraceSpans
	12, // 16: runtime.WeaveletMsg.get_health_reply:type_name -> runtime.GetHealthReply
	14, // 17: runtime.WeaveletMsg.get_metrics_reply:type_name -> runtime.GetMetricsReply
	20, // 18: runtime.WeaveletMsg.get_load_reply:type_name -> runtime.GetLoadReply
	23, // 19: runtime.WeaveletMsg.get_profile_reply:type_name -> runtime.GetProfileReply
	25, // 20: runtime.WeaveletMsg.update_routing_info_reply:type_name -> runtime.UpdateRoutingInfoReply
	29, // 21: runtime.WeaveletMsg.update_components_reply:type_name -> runtime.UpdateComponentsReply
	30, // 22: runtime.WeaveletMsg.activate_component_request:type_name -> runtime.ActivateComponentRequest
	32, // 23: runtime.WeaveletMsg.get_listener_address_request:type_name -> runtime.GetListenerAddressRequest
	34, // 24: runtime.WeaveletMsg.export_listener_request:type_name -> runtime.ExportListenerRequest
	36, // 25: runtime.WeaveletMsg.get_self_certificate_request:type_name -> runtime.GetSelfCertificateRequest
	38, // 26: runtime.WeaveletMsg.verify_client_certificate_request:type_name -> runtime.VerifyClientCertificateRequest
	40, // 27: runtime.WeaveletMsg.verify_server_certificate_request:type_name -> runtime.VerifyServerCertificateRequest
	45, // 28: runtime.EnvelopeInfo.sections:type_name -> runtime.EnvelopeInfo.SectionsEntry
	10, // 29: runtime.WeaveletInfo.version:type_name -> runtime.SemVer
	0,  // 30: runtime.GetHealthReply.status:type_name -> runtime.HealthStatus
	15, // 31: runtime.GetMetricsReply.update:type_name -> runtime.MetricUpdate
	16, // 32: runtime.MetricUpdate.defs:type_name -> runtime.MetricDef
	17, // 33: runtime.MetricUpdate.values:type_name -> runtime.MetricValue
	1,  // 34: runtime.MetricDef.typ:type_name -> runtime.MetricType
	46, // 35: runtime.MetricDef.labels:type_name -> runtime.MetricDef.LabelsEntry
	1,  // 36: runtime.MetricSnapshot.typ:type_name -> runtime.MetricType
	47, // 37: runtime.MetricSnapshot.labels:type_name -> runtime.MetricSnapshot.LabelsEntry
	21, // 38: runtime.GetLoadReply.load:type_name -> runtime.LoadReport
	48, // 39: runtime.LoadReport.loads:type_name -> runtime.LoadReport.LoadsEntry
	2,  // 40: runtime.GetProfileRequest.profile_type:type_name -> runtime.ProfileType
	26, // 41: runtime.UpdateRoutingInfoRequest.routing_info:type_name -> runtime.RoutingInfo
	27, // 42: runtime.RoutingInfo.assignment:type_name -> runtime.Assignment
	52, // 43: runtime.Assignment.slices:type_name -> runtime.Assignment.Slice
	44, // 44: runtime.TraceSpans.span:type_name -> runtime.Span
	3,  // 45: runtime.Span.kind:type_name -> runtime.Span.Kind
	53, // 46: runtime.Span.attributes:type_name -> runtime.Span.Attribute
	54, // 47: runtime.Span.links:type_name -> runtime.Span.Link
	55, // 48: runtime.Span.events:type_name -> runtime.Span.Event
	56, // 49: runtime.Span.status:type_name -> runtime.Span.Status
	57, // 50: runtime.Span.scope:type_name -> runtime.Span.Scope
	58, // 51: runtime.Span.library:type_name -> runtime.Span.Library
	59, // 52: runtime.Span.resource:type_name -> runtime.Span.Resource
	49, // 53: runtime.LoadReport.LoadsEntry.value:type_name -> runtime.LoadReport.ComponentLoad
	50, // 54: runtime.LoadReport.ComponentLoad.load:type_name -> runtime.LoadReport.SliceLoad
	51, // 55: runtime.LoadReport.SliceLoad.splits:type_name -> runtime.LoadReport.SubsliceLoad
	60, // 56: runtime.Span.Attribute.value:type_name -> runtime.Span.Attribute.Value
	53, // 57: runtime.Span.Link.attributes:type_name -> runtime.Span.Attribute
	53, // 58: runtime.Span.Event.attributes:type_name -> runtime.Span.Attribute
	5,  // 59: runtime.Span.Status.code:type_name -> runtime.Span.Status.Code
	53, // 60: runtime.Span.Resource.attributes:type_name -> runtime.Span.Attribute
	4,  // 61: runtime.Span.Attribute.Value.type:type_name -> runtime.Span.Attribute.Value.Type
	61, // 62: runtime.Span.Attribute.Value.nums:type_name -> runtime.Span.Attribute.Value.NumberList
	62, // 63: runtime.Span.Attribute.Value.strs:type_name -> runtime.Span.Attribute.Value.StringList
	64, // [64:64] is the sub-list for method output_type
	64, // [64:64] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_runtime_protos_runtime_proto_init() }
func file_runtime_protos_runtime_proto_init() {
	if File_runtime_protos_runtime_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_runtime_protos_runtime_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvelopeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaveletMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvelopeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaveletInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemVer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRoutingInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRoutingInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateComponentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateComponentsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateComponentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateComponentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListenerAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListenerAddressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportListenerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportListenerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSelfCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSelfCertificateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyClientCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyClientCertificateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyServerCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyServerCertificateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceSpans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadReport_ComponentLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadReport_SliceLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadReport_SubsliceLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assignment_Slice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Library); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Attribute_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Attribute_Value_NumberList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_protos_runtime_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Attribute_Value_StringList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_runtime_protos_runtime_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*Span_Attribute_Value_Num)(nil),
		(*Span_Attribute_Value_Str)(nil),
		(*Span_Attribute_Value_Nums)(nil),
		(*Span_Attribute_Value_Strs)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_runtime_protos_runtime_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_runtime_protos_runtime_proto_goTypes,
		DependencyIndexes: file_runtime_protos_runtime_proto_depIdxs,
		EnumInfos:         file_runtime_protos_runtime_proto_enumTypes,
		MessageInfos:      file_runtime_protos_runtime_proto_msgTypes,
	}.Build()
	File_runtime_protos_runtime_proto = out.File
	file_runtime_protos_runtime_proto_rawDesc = nil
	file_runtime_protos_runtime_proto_goTypes = nil
	file_runtime_protos_runtime_proto_depIdxs = nil
}
